/*
 * Day 18 - expression parsing 
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define INPUT_LEN 371
const char* input[371] =
{
"5 + 8 * ((6 * 5 * 8 + 5 + 8) * 7 + 3)",
"6 * 7 + 7 * (9 * 6 + 6 + 4 * 6) * 5 * 4",
"((3 * 8 + 7) * 3 * 8 * 8 * 4 * 2) * 8",
"((4 + 5 * 8 + 6 * 5) * 3 * 4 * 9 * 3 + (9 * 8)) + 2 * 7",
"(6 + 5) * 6",
"3 * 4 + 3 + (6 * 3 + (5 + 7 * 7 + 6) * 9)",
"9 * 6 * (5 + 6) + (3 + 8 * 3 * 4 + 8) + 2 * 3",
"7 * ((4 * 7 + 7) + 7) + 9 + 2 + 2",
"5 + 8 + 5 + (8 * 8 * 5) * (5 + (6 * 2 + 4 + 6) + 9 * 6 + 6 + (5 + 6)) * 4",
"3 * (7 * (6 + 8 * 4 + 7 + 2)) * 9 * (8 * 9) * (6 + 3) + 7",
"(8 + 4 * (2 * 9) + 6 + 6 + 3) + 4",
"4 + 6 + (3 + 8 * 2 * 6 * 7 + 3)",
"3 * 5 + (8 * 2 * (7 * 6 + 8 * 9 * 6)) * ((9 * 3 + 2 * 9 + 2 * 4) * 3) * 7 * 2",
"(3 * 3 * (2 * 6 * 3) + 9 + (9 * 8 * 9 * 2) + 4) + 6 * 7 + 9 * 7 * ((9 * 8 + 8) + 4)",
"(5 + 7 * 5 * 8 * 8) * (7 * (6 + 4 * 6 * 8) * 5 * (3 * 7 * 3 * 2 + 2 * 6) * 3 + 3) + 8 + (3 + (7 * 7 + 3))",
"6 + 4 * (2 + 6 + 7 + 8) * 3 + (2 + 3) + (8 * (8 + 8) * 6)",
"(9 + 3) * 7 + 4 + 6 * 3 + (2 * 7 + 9 * 7 + 9)",
"4 + 9 + (7 + 2)",
"(7 + 4 * 4 * 7 + 2) * 4 * 6 * 5 * (9 + 2)",
"(7 + 8 * 9 + 9 + 2) + (9 * (9 + 9) + 2) * 5 + 6 + 5 + 9",
"6 * 2 * 3 * (5 + (4 * 4 * 4 * 2))",
"2 + 8 + (2 + 8) + 2 * ((7 * 3 * 2 * 2 + 7 * 2) + 3 + 8 + 7) + 3",
"3 * 6 * 2 + ((4 * 5 * 6) * 6 + 3 + 6) + 4",
"8 * 8 * (5 + 7 * 6 * 8) * (6 + 5 * 3 * (7 + 8 + 3) * 8 * 2) + 9 * (2 * 9 + 8 * 3)",
"(5 * 3 + 4) * (3 * 4) * (7 * 7 + 4 + 3)",
"2 * 8 * (3 * 8 * (5 + 8) * 8 * 2) + 7 + 8",
"(6 + 5 + 7 + 8 + 2) * (4 * 4)",
"6 * 8 * 3 * 5",
"(4 + (9 * 6 * 6 * 8 * 7) + 7 * 5 + (5 + 3 + 4 * 7 + 8) + 7) + 7 + 2 + (6 + 7) * 9",
"7 + 2 + ((5 + 4 * 6) * 8 + 5) * 7 + 7 + 6",
"((7 + 9 * 5 * 2) * 8 * 5) * 8",
"7 * 2 + 4",
"(9 * 8 * 8 + 8 + (4 + 2 + 5 * 5 * 9) + 3) + (9 * 2 * 8 * 2 * 8) + 7 + 9",
"5 * 4 * 3 * 2 * 4",
"3 * 7 + (2 + 3 + 7 + 8) * 4",
"(3 * (6 + 6 + 3 * 7 + 7 * 8) * 5) + (8 * 8 + 4 * (5 + 4)) * 8 * 4 * 7 * 2",
"5 * (6 + (4 * 3 + 4 * 2) * 9 * 7 + (9 + 6 + 8)) + 2 + 6 * 3",
"9 + (9 + 5 + 5) + 9",
"5 + ((6 * 9 + 9 * 9 + 5 * 6) + 4 + 4) + 6 * 5 + 9 + 3",
"2 * 8 * (2 * 5 * 4 + 8 + 2 + 5) + 6 + (7 + 7 * 6 + 2 * 6)",
"8 + (4 + (4 * 9) + 4) * (5 + 5 + (7 + 8 * 2 + 8) + 3 + (3 * 3) + 4)",
"2 * 6 + 4 + ((2 + 9 * 6 + 7) * 8 + 4 * 2 + (3 + 8 * 2) + 4)",
"5 * (6 + 9) * (5 + 8 * 3 + 8 * 3 * (6 + 6)) * (8 + 7 + 2 * 9 * 2) + 7",
"(3 + 7 + 9 * 7 + (3 + 9 * 8 + 2 * 8 * 8) + 8) * 3 * (5 + 6 * 8 + 2 * (4 * 7 * 6) * 2) * 9 * 8",
"9 + (5 * 4 * 8 + 8) + 7 + (2 * 8 * 4 * 5 * 2) + 2",
"5 * (4 * (8 * 9 + 7 + 4 + 3 * 2) + (2 * 4 * 7 * 5 + 9 + 2) + (2 + 2 * 9 + 3)) + 8 + 9 + 2 + (4 + 9 + 9 * 2 * (6 * 2 * 4 * 7) + 7)",
"6 + ((5 * 4 * 6 + 9 * 6 * 3) + 8 * 8) + 2",
"6 * 5 * 7 * 3 + ((7 * 3) * (7 + 2) + 9 + (9 + 7 * 6 * 6 + 9) * (4 + 8 * 4 + 9)) + 7",
"3 + 4 + (4 * 7 + 8) + 3 * ((5 * 6) * 6) * (7 + 6 + 9 * 8 + 4 * (4 * 2))",
"5 * (4 * 5 * (3 * 4 + 4 * 2 * 9 * 8) + 7 * 7) * 7",
"7 + 8 + (3 * 3 + 2 * (8 * 9) * 5) * 6",
"3 + 8 * ((6 + 8) * 5 * 3 + 2) * (2 * 5) * 7",
"4 * 5 + (9 + 8 * (2 * 3 * 4) + 3 * 5) * 9 + 2",
"4 * ((5 + 6 + 2 + 5 * 3 * 7) * 6) * 7 * 4 + 6 * 4",
"9 + (9 + 4 * 4 + 7 * 9) + 9 + 2",
"6 + (8 * (2 + 8 + 6 * 4) * 8) * 7 * 4 * 3 + 9",
"4 * (5 + (6 * 4 * 8 + 8) * 5 + 6 + 9 * 7) * 6 + 4 * 5",
"6 * 9 * (6 + 5 * 6 + 2 * (5 + 5 + 8)) + (7 + 7)",
"(2 * 7 * 4 * 5 * 8 * 2) + 7 + 5 * 8 * 6 + 6",
"(8 + 3 + 8) * 6 + 8 * (7 * 4 * (5 + 7 + 5 + 7) * 4 + (2 + 2) + 7) + 9",
"((6 * 7 * 9 * 9 * 2) + (2 + 8 + 2 + 3 + 5) * (8 + 9 + 4 + 3)) + 9 * 3 * 6",
"5 + 5 * (5 + 2 + 6 + 8 * 8 * 7) + 2 * 2",
"2 * (4 * (2 + 9 * 4 * 8 + 9) + 3 * 8) + 7",
"5 + (5 + 2 + (5 * 2 * 7 + 9 * 6)) + 7 + ((4 + 9 * 8 + 2) * 6 + 4 + 2 * 3)",
"2 + ((2 * 6 + 4 * 8 + 5) * 7 * 4 + 2) + 4",
"(9 + 8 + 5 * 7 + 5 + 4) + 2 * 3 * 8",
"9 + ((6 * 6 + 9 + 8 * 9 * 3) + 6) + (9 + 8 * 4) + 7 + 6",
"2 + (6 + 7 * 2 + 3 * 9 * (4 * 7 + 8 + 2 * 9)) * 9 + 8",
"9 * 5 + 7 + ((4 + 7 * 6 * 6) * 6 + (3 * 4 + 2 * 7 + 7 + 8) + 9 + (5 * 3 * 4 * 6 * 6 + 7)) * 8 * 6",
"5 + 5 * 2 * 6 * 2 * 5",
"6 * 8 + (3 + 9) * 6 * (9 * 8 * 6 * (9 * 6) * (3 * 4)) + (9 + 7 + 6)",
"3 + 8 * 2 * 9 + 2 * 8",
"(4 * (3 + 9 + 4 + 9 * 6) * (9 + 6 * 8 + 2 * 7)) + 2",
"7 * (7 * 8 * (7 + 2 * 5) + 5 + 2) + 4",
"2 + (4 + 2 + 4 + (8 * 4 + 5 + 6) + 2 * 2) + 9 + 6",
"((9 + 4 * 7 + 4) * (8 * 3 * 3 + 7 + 8 + 8) + 2 + 7) * 9",
"5 + 5 + ((8 * 4 * 2) + 3 + 7)",
"4 + 4 * 7 * 2 + ((6 + 3 * 6) * 5 * (7 * 9 + 8 + 2 * 3))",
"6 * ((5 * 9 + 4 * 2) + 5 + (8 * 7 * 6 * 3 + 2) * (2 * 2 * 6 * 4 + 2)) * 3",
"(4 + (5 + 4 + 5) * 7) + (3 * 9 + 5 * 6 + 4) + (5 * 2 + 7 * 7 * 2 + 2)",
"((5 * 6 * 3) + 9) * (7 * 3 * 3 + (3 + 5 * 4)) + (2 * 8) * 8 + 5",
"(7 * (2 * 6) + 7 * 3) + 7 + 5",
"(5 + (8 * 5 + 2 * 8 + 3 * 2) + 5) + 5 * 4 + 5",
"2 + (5 * 5 + 2 + 7) * (2 * (5 + 3) + 9 * 8 * (5 + 9 * 5 * 7 * 5 + 9))",
"9 + (7 + 4 + 3 + (3 * 3 + 3 + 6 + 6) * (4 + 6)) * 4 + 8",
"3 + 4 * ((7 * 4 * 3 * 3 + 7 * 9) + 8 + (3 * 2 * 4 + 3) * 3 + (6 * 7 + 9 + 7 * 8 + 4)) * 6",
"8 + (7 * (8 + 3 + 5 + 6 + 8) * 9 * (5 + 2 * 4 * 2 + 2) + 6 * 7)",
"(2 + 5 * 3 * 7 + 3 * (5 * 8 + 3 + 8 * 6)) + 8",
"5 + 4",
"8 + 7 + 6 * 5 + 6 + 9",
"6 * ((4 * 6) * 9 * (5 + 7 + 3 + 5) + 8) + (5 + (3 + 3 * 5 + 7))",
"(8 + 8 + 8 + 5 * 5 * (3 * 7 * 2 + 5 * 5)) * 6 + 3",
"4 * (8 + 4 * 3) * (5 * 5 * 6 + 7 + (4 + 4)) + 6 + 9",
"5 * 7 + 2 + (8 + (8 + 4 + 3 * 9 + 8 + 7) + (4 * 2 * 6 + 2) * 8 + 3 + 9) * (4 * 9 + (5 + 7 + 9)) * 2",
"3 * (9 * 2 + 6 + 9 + 8) * 2 * 6 * 5",
"(3 * 7 + (2 * 3 * 2 * 4 + 9)) + (5 * 4 * 7) * 8 * 6 + 9",
"7 + 8 + 3 * (2 + 7)",
"9 * (2 * 5 * 5 + 9 + 5 + 2) * (7 * 9 + 3) * 3 * 4",
"9 * (5 * 5 + 7 * 6) + 8",
"2 + 9 + (2 + 4 + (3 + 2 + 7 + 7 + 8)) * 3 + 8 + 7",
"4 * 9 * (4 * (4 * 3 + 2 + 2) * 9 * 9 + 3 + 7) * (5 + 4) * 5 * (7 + 8)",
"5 * 7 + 2 + 5 * 7 * (9 + 4)",
"8 + (7 * (6 + 3 + 8 + 6 + 7) * (8 + 8) * 7 * 6 * 4) * 6 + 4",
"((4 + 6) + 9) + 3 + 8 * (6 + 5) + 6 + 2",
"7 * (4 * 9 + 5 * 5) + ((4 * 6 + 8) * 8 + 7 * (5 + 6 * 4 * 2 * 2 + 6) * 9 + 8) * 4 + 2 * 3",
"7 + 7 + (2 * 6 + 2) + 4 * 6",
"(5 * 2 * 3) * 6",
"(8 + (4 + 4 + 3 * 5)) * 7 * (8 * 6 * (8 * 9 * 6)) + 2 + (9 + (3 * 5 + 5 * 3) + 5 + 2 * (7 * 3 + 8 + 7 * 3) * 2) * 9",
"2 * 2 * (8 * (6 + 9 + 6) * 3 * 3 * 8)",
"9 + 5 + ((9 * 6 + 2 * 5) + (9 + 3) * (5 * 7 * 9 * 4 * 9) + 7) * 2 * 3",
"8 * (3 + 3 * 3) * 8 + 8",
"8 * (3 * 4 * (6 + 6 * 4 + 9) * 6) * 9 + 9 * ((2 + 7 + 3) * 5 * (5 + 2 * 4) + (8 * 7 * 9) + (2 + 7 + 2 + 9 * 7 * 4))",
"4 * 7 * 6 + 4 * 9",
"8 * 8 * (4 + (2 + 8 * 6) + 8) * ((8 * 7 + 8) * 2 * 2 + (7 * 3 + 9) + 4) + 9",
"(6 * (4 * 7 * 7 * 5 * 9) * 4 * 8 * 6) * 2",
"9 + 8 + ((5 * 4) * 3 * 5 + 9) + 8 + 3 + 9",
"2 * 4 + ((9 * 7) * (8 * 4 * 5 + 6 + 9 + 2) * 8 * 4 + 9) * 8",
"8 * 4 + ((9 + 6) + 2) * 3 * (7 * 4) + 9",
"(7 * 6 * 8 * 4 * 2 + 6) * (9 * (3 + 5) + (2 * 6 * 9 * 7 * 2)) * 8 + 2 + 7",
"7 + 5 * ((9 + 3) + 2 * (6 * 4 + 9 + 2) + 4) * (8 + 3 + 7 * 9 + 3) + 4",
"7 + ((2 + 8 * 8) + 7 + 8 + (4 * 6 + 7 + 5 * 6 + 6) + 7 + (7 * 4 + 4 * 9 + 6 + 6)) + 6 * 9 * 6 * 7",
"4 + (5 + 3 * (9 * 6 + 2 * 6) * 5 * (6 * 2)) + (2 * (7 * 4) + (3 + 9 * 6) * 8 * 4 * (8 * 7 * 2 * 4)) + (7 * 3 + 3) * 6",
"2 + 3 * (8 + (2 + 7 * 3 + 2) + 6) * ((2 + 4) + 3 * 4 * (6 * 4 * 2 * 4 + 7)) + 5",
"(6 * 3) * 7 + (4 * (7 + 8 * 9) * (9 * 5 + 8 + 4) + 5 * (8 + 9 * 8 * 7 * 9 + 6) + 4)",
"7 + (8 * 6 + 9 * 7 * 4 * 6)",
"2 * (3 + 8 + 8 + 3 + 7) * 4 * 6 * (4 + 3 * 5 * 2 * (8 * 8 + 8 + 9 + 7) + 6) * (4 * 9 * 6 + 5)",
"9 + 6 * 7 * 2 + ((9 + 6 * 3 + 2 * 4 + 3) + 8 + 6 * 8 * 9 + 4)",
"8 + (2 * 7 + 2 * (7 * 3 + 7 * 2 * 2 * 8) + (7 * 4 + 6 + 7 + 3) + 9) + 9",
"8 * ((4 + 7 * 4) * 6 + 3)",
"((2 + 2 + 5 * 9) * 9 + 2 * 8 * 8 * 3) * 7",
"(8 + 9 * 2 + 2 * 3 * 6) + (4 * 7 * (2 * 2) + 9 + 7) * 2 + 7 * 9 * (8 * 7 * 2 * 4)",
"(7 * (2 * 4 * 3 + 5 * 4 + 5)) * 3 * 7 * 9",
"2 * 6 + 9 + 5 + ((9 * 2 * 5 + 7) * 6) + 8",
"(8 * (6 * 4 * 5 * 5 + 5 * 2) * 7 + 7 * 6) + ((4 * 5 * 4) * 4)",
"(8 * 8 * (2 + 3)) * 2 + 8 + 5 * ((9 * 5 + 3 * 2 + 5 * 2) * (3 + 5))",
"7 + 8 * 4 * ((4 * 6 + 2 * 2 * 7) * (6 + 9) + 4) + 2 + 6",
"3 * 5 * (2 * 5 * 9 + (5 * 8 * 8))",
"(4 + 2) * 4 * 5 + 8 * ((2 + 8 * 5 + 7) * 9 + 9) * (6 + 3 * 3)",
"((9 + 8 + 8 + 4) * 6) * 5",
"2 + (2 * 9)",
"(4 + 2) + ((8 * 9 * 3 + 2 * 5) + (2 * 3 * 9 * 6 + 8 * 9) * 9 * 4 * 6) + 8 + 8 * ((3 * 9) * 8 + 9 + 6 * 5 + 3)",
"(5 * 8 + 5 * 2 + 3 * 5) * (8 + 7) * 2 * (2 + 5) * 7 * 7",
"7 * 5 * 4 * 4",
"((2 * 9 + 9 * 9 + 8) + 6 + 7 * 7 + 2 + 4) * 4 + 2",
"(8 * 2 + 9 * 7 * (2 * 4 * 6 * 7 + 7 * 8)) + 2 * 7 * 9 + 2",
"3 + 3 * 9 * 6 + 9",
"(6 + (6 * 7 + 4 * 7) + 5) + 8 + 3",
"7 * 7 + (9 + (5 + 4 * 3)) * 2 * (4 * 4 + 3 * 4)",
"4 * 9 + (3 + (6 * 6 * 9 + 8 + 4) + 4 + 7 + 6)",
"8 + 4 * ((9 * 2 * 2 + 8) + 7 * 7) + 8 + 9",
"9 + 6 * 6 * (3 + (2 * 5) + 9 * 3 * 7) + 6",
"9 + (5 * 6 * 7 * 4 + 8 * 9) + 7",
"9 + 7 * (3 + 8 + 2 + 4 + 5 * 3) + 8 + (5 * (4 * 5 * 5 + 2) * 6 * (7 + 4 * 7 * 2 * 5 + 2)) * 7",
"(3 * 2 * 6 + 7) + 7",
"9 * 8 * 4 + 9 + 4 * (5 * 5 * 6 * (3 * 3 + 9) * 9 * 7)",
"(8 * 4 * 9 * 9 + 4 * 4) + 7 + 7",
"(3 + 3 + 2 * 4) + 4 * 5 * (7 + 4 * 3 * 9 + 4) * 3",
"7 + (2 + 3 * 4 + 2 + (9 + 7) * 5) + 5 * 3 * 9",
"7 + ((9 * 8 * 2 * 3 + 7) * 5 + 5 + 4 * 5) + 3 * 8 * 4 + 4",
"4 * ((8 + 3) + 8 + 5 + (6 + 2 + 9 + 2 + 7) + 8) + (8 * 9 * 8)",
"9 * (5 + 5 * 8 + 8) + 2 + 7 * 7",
"3 + (5 + (8 * 5 * 3 + 9 + 8 * 7)) * ((7 * 5) * 5 * 4 * 2) + 9",
"2 + 4 + (7 * 8 + 8 + 5 * 8) + (6 + (2 + 7 + 9 + 6 * 9) * (6 + 7 * 5))",
"2 + 8 + 7 + ((5 * 5) * 6)",
"2 * (9 + (6 + 6 * 6 * 9) + (3 + 5 + 6 * 8 + 7 * 5))",
"(3 + 8 + 3 * 3 * 3) * 7 * (2 * (8 + 4 + 4 * 8 * 7) * 7 * 4) + ((8 + 2 * 4) * 4 + 7 + 6 + 4 + 2)",
"6 + 5 + 9 * (8 * (7 * 5 * 6 * 3 * 7 + 3)) * 3 * 3",
"5 + ((3 * 7 * 7 + 5 + 2) * (6 * 4 + 4 + 6 * 9) + 3 * (5 + 6 * 4 + 6 * 6 + 4) + 9)",
"(2 + (5 + 5 + 4)) + 6",
"6 + 8 * (8 + 7 + 4 + 2 * 3)",
"(7 * 9 + 4 * 2) + 4 * 9",
"2 + (3 * (7 * 6 + 4 * 2 * 6) * (3 + 6 + 4 * 9 * 9 + 3))",
"7 + 4 + 2 + (6 + 8 * (9 + 2 + 9 * 6) * 7 * 8 * 9)",
"9 + (8 + 2 + (7 + 9 + 5 * 8 + 3 + 4) * 8 + 2) + 7 * (4 * (7 * 3 + 7 + 2 + 9 * 5) + 3 + 4 + 3)",
"5 * (3 + 3 + 8 * 7) * (8 + (3 * 3) + 8) + 8 * (7 + 5 + (8 * 3 + 2) * 9 + 8)",
"(4 + 6 + 2 + (7 + 4 * 9) * 8) + 8 + 8",
"(3 + (8 * 5 + 6 + 4 + 6 * 3) + 5 + 8 * 5) + 3 + 8 + 8 + 3 + ((4 * 5 * 5 * 6) * 9 * 3 + 4 + 2 + 6)",
"2 * 8 * 4 + (8 * 2 + 7 * 2 * (9 * 9 + 8 + 4 * 3 * 4) * 6) + 5",
"((4 + 7 + 2) + 9) + 6 + 8 * 9 * 7 + 3",
"(2 + 9) + 3 * 4 * 6",
"7 * 4 * ((2 * 8 * 7) * 8 * 7) + 3",
"2 + 8 + 7 * (5 * 9) * 7 + 5",
"7 + 2 + 3 + 5 * (6 * 8 + 7 + (7 + 5 * 9 + 5 + 5 + 3)) * 9",
"6 + 3 * (5 + 4 * 9 + 9 + 9 + (5 * 9 * 3 + 2 * 5 * 6)) * 6 * 7 * 3",
"2 * 7 + 5 + 3 + 2 + 5",
"6 * 4 + (5 * 3) + 6 + (6 * 9 + 9 + 7 * 4)",
"(3 * 9 + 6 + 4 * (3 * 6 + 8 * 4) * 7) + 8",
"3 * (3 + 7) * 3 + 4 + 6 * 4",
"8 + (2 + (7 + 4 * 5 + 9 + 2)) * 7 + 2",
"2 + (4 + 9 * 5 + (2 * 3 + 5 * 2 * 7 * 8) * 4) * 5",
"8 + ((8 + 6 * 9 * 8 * 5 * 7) * 4 * 2 * 6)",
"(5 * 9) * 8 * (5 + 9 * 3 + 4 + (9 + 2 * 6 * 3 + 8 * 8) + 5) * 6",
"((3 + 6 * 5 * 2) * 7 * 2 * 6 + 6) + 7 + 7 + 2",
"8 + 8 + 7 * 2 * 3",
"5 * ((4 + 2 + 4 * 7) + 5 + 2 * 9) * 6",
"2 + 5",
"(6 + (6 * 4 + 6) * 8 * 9 + 4 * 3) + 8 + 9 + (6 + 3 * 4 + 2 + 6) * (3 * 4)",
"(6 * 9 * 8 * 9 * 7 + 6) + 6",
"3 * (4 * 2 + 8 + (6 * 5 * 3 + 4) * 4) * 5 * 3",
"9 * (4 + 2 + 5)",
"2 + 9 + (5 + (7 + 9) + 4 * 6 * 3)",
"((4 + 2) + 7) + 6 * 7",
"(8 * 9 + 6 * (4 * 2)) + 5",
"8 * (9 * (6 + 8 * 8 * 8 + 7 * 8) + 4 + 6 + 9 * (8 + 3 * 7 * 6 * 2))",
"2 + (4 + (9 + 5)) + 8 * 6 * 5",
"2 + (2 + (3 + 8 * 9 * 8 * 2) * 6) + 2 + (4 * 2 + 3 * 9)",
"((3 + 3) + 9 + 7 * 8 + 9) + (8 + 7 * 6) + 8 + 8 + (4 * 2 * 3 + 8 + 9)",
"((9 + 6 + 2 * 6 * 8 + 6) * 8) + (8 + 7)",
"9 * 6 * 3 + (9 * 5 + (7 * 2 * 9 * 9 * 9 + 3) + (4 + 4))",
"3 + 5 * 9 * 5 * 5 * 5",
"3 + (4 + 6) + (4 * (4 * 5 * 2 + 9 + 8 + 4) + 3)",
"(4 * 4) + (4 * 2 + 4 * 2) + 7",
"((5 * 3 * 8) + 6 * 4 * 5) + 5 * 2 * 6",
"2 + 7 * 5 * (2 * 9 * 9 + (4 * 5 * 5 * 6 + 6 * 4) * 6) + 2 * 7",
"6 * 7 + 9 + (7 * 7 * 7 * 2 * 3 + (7 * 9 + 9 * 9)) * 8 + 3",
"(5 * 6 + (7 + 6 + 3 + 2 * 6 + 3)) + (2 * (3 + 4 * 6)) * 7 * 5 + 6 * ((2 * 2 * 5) + (2 * 5 + 9 + 3 * 9) * (5 + 7 + 7 + 4 * 9 * 5) + (8 + 5 + 8 * 7 + 2))",
"5 + 2 * (5 + (8 + 9 * 2 * 6 + 5 * 8) + 4 + 8 * (4 + 4) * 7)",
"(6 * 9) * 2 * (5 * 8 * 8) + 8",
"(3 + 8 * 7) * 3 * 5 * 7 * 7",
"((7 + 4 + 5 + 9 * 4) + 6 + 5 * (2 + 7 * 8 * 2 * 7 * 2)) + 8",
"7 + ((3 * 6 + 7 + 8 * 5 + 6) * 5 + (7 + 2 + 7 * 6 * 8 * 7) + (6 * 5 * 8 + 8) + 6 * 9) + 3 * 4 * 3 * 8",
"2 + 9 * ((7 + 6) + (5 * 8 * 9 + 6) * 7 + 5 + 9) * 9",
"(6 + 3 * 5) + 5 + 9 + (7 + 9 * 5 * 7) + 6 * 5",
"6 * 2 * 6",
"(5 * 5 + (2 + 7 * 8 + 6 * 6) * (3 + 3 * 2 + 5 * 8 * 7) * 2 + 4) + 4",
"5 * 8 + 7 + (8 * 4 + 8) + 5 * 9",
"2 + 7 + ((4 * 2) * 5 * (5 + 7 * 7 * 4 * 8 * 9)) + 3 + 6",
"4 * ((2 * 5 + 9 * 9) * 2 + 6 * 9) + 7 * ((8 * 4 * 7 + 9 * 9 * 4) * (7 * 4 + 8))",
"3 + 6 + 2 * 5 * ((5 + 6 * 8 + 7 + 3 + 3) * 2 + (4 + 2 + 6 + 4 + 6 + 3) * 6 * 2) * (6 + 6)",
"6 * 9 + 4 * 2 + (9 * 4) + 6",
"7 + ((2 + 3 * 9 * 4 * 5) + 6 + 8) + 2 * 7",
"5 * 7 * 8 + 2 * (9 * 4 + (5 * 7)) + 8",
"(4 + 4 + 5 + (6 * 9 * 9 + 9 + 2 * 7) * 4) + 9 * 8",
"((8 + 2 + 4 + 6) * 4 * 2 + 6 + (9 + 9) * 7) + 4 * (5 * 5)",
"4 * 9 + (3 * (5 + 5 * 8 + 8) + 3 * 6 * 3) + 5 * 3 * 4",
"2 * 9 + (9 + 6 + 2 * (3 + 9 * 8 * 7 * 6 * 6))",
"(2 + (2 * 9 + 4) + (5 + 8 + 2 * 3) * (8 + 2 * 8 + 8 * 8 * 2)) + (5 + 3 * 5 * (6 + 3)) + 8 * 3",
"8 + (6 + 3 * 2 * 9 + (3 * 6) * 6) + 8 * (9 + 8) + 2 + 7",
"(4 * 5 + (2 + 2 + 5 * 7 * 9) + 2) * 3 * 3 + 8 * 7 * 7",
"(8 + 3) * (4 * 3 + 7 + 4) + (4 + 7 * 2 + 2) * 4 + 6",
"2 * 6 * ((2 * 2 * 9 + 6 + 9 + 5) + (6 + 2)) + 3 * 2 * 9",
"4 * 5 * (8 * 7) + (8 * 5 * 8 + 3 + (2 + 8 * 8 + 3) * 3)",
"3 + 4 + 7 + (6 * 3) + ((5 + 5) + 7 + (3 * 2 + 7 + 2 + 7 * 6) + 3 * 6 + (4 + 9 * 3 * 5 * 2)) * 9",
"9 + 5 * 6 + (6 + (3 + 9 * 9 * 7) + 6 * 4 + 9 + 8) + 8 + 5",
"6 + 4 + 2",
"4 + 8 + 6 * (8 + 7 * 3 * 7 * 7 * 2) + (7 + 4 * 9) * ((7 * 8) + 7 * 6 + 9 * 5 * (4 * 4 * 5 * 8))",
"3 + 3 + (4 * 6 * 9 * 5 + 9) + (3 + 4 + 2 * (6 + 3 * 3 * 9 * 3))",
"9 * 6",
"(4 * 9 * 4 + 8 * 4) + 3 * 7 + 5",
"9 + (2 + 4 * 4 + 7 * (6 * 6 * 9)) + 2 * 6",
"((2 + 8 + 9 * 8) + 9 + 3) + 4 * 3 + 2 + 6",
"3 * 7 * 5 * (2 * (2 * 7 * 9) + 9) + 8",
"6 + 7 * 7 + (5 + 3 + 4 + (4 * 9 * 8 + 2 * 5) + 7) * 6 * 9",
"2 * ((5 + 5 * 3 * 3 * 8) + 3 * 4) * 9 * 9 * 8",
"(2 * 7) + 9 * 5 + 9 + 4 * (8 * 5 * (8 + 6 * 8 + 8 + 2) * (2 + 7) * (6 + 7 * 6 + 4 * 2 + 2) + 8)",
"5 * 7 + 7 + 3",
"2 + 3 * (5 + 8 + 6 * 9 * 5) + 9 * 6 + 7",
"(7 * 5 + 5 * 7 + 3 + 3) * 6 + (5 + 6 + 3)",
"9 * 7 + (9 + 5 * 9 + 7) + 9 * 5 + 5",
"(7 * (6 * 7 + 3 * 3 + 2 * 6) + (6 * 6) + 6 + 7 + 9) * 4 * 9 + 3 * 8 * 5",
"7 + 7 * 7 + (3 + 9 + 4 + 5)",
"(8 + (6 * 7 * 6 * 9 + 8 * 7) + 4 * 2 + 4 + (4 + 5 * 8 + 5 * 9 + 5)) * (2 + 9) * 8 * 5 * 4 * 6",
"(9 * (6 + 8 + 5) * 6 * 6) + 3",
"2 * (4 + 3 * 5 + 3) + (9 * 3 + 2 + 3) + 2 * 2",
"4 * (2 * 5 * 3 + 4 * 3 + 5) + 9 * (4 + 7 + 2 * 4)",
"9 + 5 * 8 + 5 + 4 * (2 * 8 + 8)",
"9 + (7 * 3 * 6 + (9 * 7 * 8 + 2 * 3 + 4)) + 4",
"6 * 3 * (8 * (3 * 8 * 5 * 8 + 6) * 3) * 6 * 4",
"5 + 7 + ((4 * 4 + 4) * 5 * 2 * 2 + 7 + (5 + 5 * 4 + 8 + 3 * 5)) * 9 + 9",
"((4 * 8) + 6 * 8 * (3 + 3 + 2 * 3 + 7 * 7)) + 7 + (3 * 2)",
"4 + (7 + 6) + 7 + 7 + (5 + 2 + (5 * 8 * 4) + 7 * (5 * 7) + 2) * 5",
"(7 + 7 * 8 * 7 + 2 * 6) + 6 * 4 + 2 + 2",
"(7 + 7) + 8 + 5 + 2 * 5 * 3",
"((2 * 9 * 8 + 5) * 3 + (4 + 3 + 6 * 9)) * 3 * (9 + 3)",
"5 * (3 + (4 * 6 * 5 * 9 + 9) * 8) * 8 * 5 * 4 + 5",
"2 + 3 * 2 + 7 + (5 + 8 + 2)",
"7 * (6 + (6 + 2 + 8 + 8 + 8)) + 6 + 4 * 8",
"(8 * 8 + 3 * 2 * 2) + 7",
"(7 * (8 + 3 + 8) + (2 + 4) * 8 + 2 * 8) * 4 + 3 * 9",
"8 + (3 * (7 * 6) + (5 * 6 * 5) + 8 * 5) + 7 + 8 * 3 + 5",
"7 * (4 + 2 * 5 * 8) * 2 * 5",
"6 * (5 + 3) + 7 * 2",
"3 + 4",
"7 + 7 * 6 * ((5 + 3 + 3 * 8) + 4 + 8 * 7 * 9) + 8 * 3",
"6 + 4 * 6 + 6 * (3 * 4 + 5 * 3 * (8 * 8 * 8 * 5 + 8) + 5)",
"7 + (5 + 7 + 7 * (2 * 3 * 2 * 6 * 7 + 9)) * 6 + 5 * 2",
"2 + (4 * 8 + 6) * 2 * 4 + 7 + 2",
"(5 + 4 + (6 + 6 * 2 * 8) + 8 * 3) * 9 * 8 * 2 * 6",
"2 * (7 * 6 + 7 * 3 + 6 + 6) * ((8 + 8 + 5) * (9 * 4 + 4 + 3 * 3) * 8 + 2 + 5) * 2 * 4 * 9",
"3 + (5 * 9 + 3 * 4 * (6 + 4 + 7 * 7 * 5 * 7)) * 3 * (7 * (6 * 2 * 9 * 7 * 4 + 3) + 8 * 7 + 4) + (5 + 3 + 6 + 9 * 8)",
"7 + (4 * 8 * 9 * 6 * 5 + 6) + (6 + 5 + 2 * 5) + 7 * 4 + 5",
"(9 + 4 + 6) + 9 + 8 + (7 + 9 + 7 + (2 + 5 + 5 + 8 * 4) * 2) * 4 + (5 + (3 * 7 + 6))",
"(3 + (5 + 4 * 8) * 6) * 9 * 2 * 3 * 4 * 8",
"8 + (6 * 4 * 3 + 3 + 7) + ((4 * 4 + 9 * 8 * 6 * 8) + 9 * 7 + 2) + 9",
"4 + 3 + ((7 * 7) + 9 * 9 + (3 + 5 * 8))",
"3 + 8 + 4",
"(2 * 5 + 2 + (9 + 6 * 3 * 9 + 3)) * ((4 + 6 * 6) * 8 + 2 + 5) + 8",
"9 * (6 + 2 * 6 * (6 + 5 * 9) * 2 * 5)",
"5 + 4 * (4 + (6 + 9 + 8 + 5) * 2 + 9 * (8 + 2 * 2 * 5 * 3)) + (6 + (3 + 8 * 7 * 6 * 5 * 6) * 9) + 6 * 3",
"(3 * 6) * (8 + 2 * 6) * (5 * 5 + (9 * 8 + 9 * 4) * (3 * 3))",
"8 + (6 + 5 * (7 + 9 + 5 + 5 + 6 * 4) + 5 * 2 + 9) * 3 + 2 + 7 * 5",
"(6 + 5) + 7 * 7",
"(4 + 7 + 3 + 5 + 5) * 3 + 7",
"(5 * 3 * 4) + 9 + 2 + 5",
"(4 * 6 * 6) * 7 + 4 + ((3 * 4 * 5) * (5 + 5 + 9 * 7) + 7 + 9 + 9 + 7) * 5 + 8",
"7 * 4 + 8",
"((4 + 8 + 8 + 2 + 4) + 6) + 7 * 4",
"(8 * 8 + 3) + (4 + 3)",
"2 + (8 + 8 + 3 + 3 + 3)",
"2 * ((7 + 2 * 8 + 2) * 8 * 3 * 2) * 8 + 8 * 3 + 3",
"8 * 7 + (9 * 2 * 3) * 4",
"5 + (7 * 8 + 2 * 8 + 8) * 9",
"((3 + 9 + 4 + 3) + 9 + (3 + 8) * (8 + 7 * 7 + 3 * 6 * 3) * (8 + 7) * 3) + 8 + 5",
"8 * 9 + 8 * (4 + 6 * 8 * (6 + 4 + 4 * 8) * 5 * 6) + 4",
"(4 * 8 + 8 * (5 + 4) * 9 + 3) * 9",
"8 * (4 * 2 * 7 + 5 + (5 + 5 * 5 + 7 * 4 + 7))",
"2 + (3 + 9 * (4 * 2)) + 5 * 3 * 4 + 5",
"6 * 2 + ((8 * 9 * 4 * 8 * 6) * 7 + 3 * 9)",
"2 + (9 + (8 + 4 * 8 + 5 * 4) * 6 * 7 + (5 + 3 + 9 * 2 * 4 * 2) * 5) * 9 * 2",
"6 + 2 + 3 + 8 * (8 * 5 * 3 + 8) * (5 + 2 + 5)",
"4 * (6 * 8 + (5 * 6) + 2) * 9 * 8 + (3 + 2 + 4)",
"9 * 5 * 3 + (4 * 6 + (3 * 7 + 6 + 5 + 8))",
"(4 + 5 * 5) + 2 * 4 * 9 + 2 + (7 * 9 * 3 + 4 * 5 * 6)",
"7 + 9 * 6 * (6 + 8 + 3 * 6 + 4 + 6)",
"(9 * 3 + 5) + 7 * 4 + (3 * 8 + 6 + (8 * 4) * 4 + (4 + 4 * 6 * 4)) * 3",
"9 * 6 * 7 * (4 * 4 + (2 * 6 * 6 * 4 * 8 + 3) * 7 * 2 * 8) * 4 * 8",
"3 * 9 * (8 * 2 + 2 * (3 + 6) * (5 + 9 + 6)) + (5 * 4)",
"9 * 4 + 6 * ((4 + 2 + 9 * 2) + 3 * 9 + 4) + 6",
"4 + (4 + (3 + 9 * 5 + 7) + 4 * 7)",
"(2 + 9 * 3 * 6 + 7) * ((2 + 6 * 6 * 5 * 8 * 7) * 8 * 4 + 2)",
"(4 * 2 * (4 * 7 + 4 * 2) * 5 * 2 * (6 + 6 + 9 * 8)) + 4 * (9 * 9 + 7 * (8 * 4 + 5) * 4) + 4",
"3 + (6 * (3 + 8 + 3 + 9 * 5) + 3 + (4 + 9 + 3 + 4 * 3 + 4) + 6)",
"(9 + (5 * 6 + 2 * 7 * 4) + 3 + 3 + 9 + 4) * 5 + 9",
"4 * ((9 * 7 * 4) + 9 * 4 * 3) * (6 + 6 + 3 + 4) * 3 * 5",
"4 + 2 + (4 + 2 * 2 * 4 * 7 + 6) * 3 * (5 + 6 + 6 * (4 * 6 + 2) * 3)",
"(9 * 8 * 9 + 3) + 4 + (8 + (7 + 3 * 9)) + (7 + 5 + (7 * 2 * 5 + 6 * 8 * 5)) * (7 + 3 * 9 * 9 + 4 * 7) + 4",
"3 * 6 + 4 + 6 * 3",
"8 * 3 + (3 * 6 + 5) + 9 + (9 + (7 + 6 * 9 * 2 * 8) + 8 + (5 + 7 * 3 + 8 + 4 + 3)) * 9",
"6 * 7 + (6 * 9 * 9) * ((9 * 2) + 6 * 7 + 3 * 5)",
"(3 * 7) + 2 * 3 + 4 + (5 * 8 + 7 + 9 * 7 * 7)",
"6 * 2 + 3 * 6 + (6 * 7 * 2 * 4) * 8",
"4 + ((2 + 7 * 2 + 6 * 2) * (6 * 4 + 3) * 9 * 2 + 4 + 8) * 5 * 3 * 2 + 2",
"9 + (4 + 5 * 9) * 2 * (5 + 8 * 8 + 2 + 2 * 2) * 4 * (3 * 3 + 3)",
"3 * 7 * 7 + (8 + 7 * 5 * 7) * 9 + (4 * 2)",
"(9 * 6 * 6) + 4 + 9 * 2 + 4 + 3",
"9 * 7 + 6 * 8",
"(7 + 5 * 5 * 2) + 2 + 7 + 8 * 8",
"2 * 7 * (6 + 2) + 2 + 2 * ((8 * 5 + 2 + 8 + 9 * 6) + (4 * 8) + 8 + 9 + (4 + 8 * 9 * 7 + 2))",
"4 + 8 * 2 * 9 + (9 + 3 * 3 + 4 * 5) * 2",
"5 + (6 * (9 + 3 * 9 + 7 + 9 * 2))",
"9 * 7 * 9 + (5 * (6 * 8 + 5 + 3) + (2 * 3 * 5))",
"((2 * 5 * 3) + 6 * 4 + (5 + 3 + 2 * 9)) + (5 * 9) + 9",
"((3 + 2) + (6 * 3 * 4) + 5) * 5 * 8 * (9 * 9 + (6 + 9 + 4 * 7) + (2 * 9 * 8 + 4 * 8 + 3) + (5 + 5 * 7)) + 2 + 8",
"7 + 4 * 2 * 3",
"((3 + 3) * (2 + 6 * 3 * 8) * 7 + 8) + 2 + ((4 + 6 + 3) * 7 * 9 + 9) * 4 * 7 * (6 * (6 + 3 + 4 * 3) + 4)",
"9 + (9 + 7 + 3) * 6 + (2 + 9)",
"5 + ((3 * 3 + 4) + (9 + 8) * 9) + 2 + 9",
"9 * 3",
"8 + 4 + 5 + (9 + 6 * (9 * 7 * 4 * 9) * 3) + 7",
"((9 + 9 * 8 + 4 + 6) + (6 * 7 + 4 + 2 * 2 * 3) * 6 * 8) * 3 + 2 + 7 + 3",
"4 + 4 * 6 + ((8 * 8 * 2) * (3 * 5 + 7 + 2 * 6 * 2) * 4) * 8 * 9",
"(6 + 4) + (8 + 9 * 9 + 5 + 4 * 8) * 4",
"3 + 2 + 5 * (5 * 9 * 5 + 4 * 6)",
"2 + 6 * 8 + (5 + 3 * 6 + (7 + 6 + 3 + 3 * 7))",
"3 * (7 * 9 + 4 + (4 + 4 + 3 + 4 + 3) + (4 * 6 + 2 * 6)) + 6 + 7 + 6",
"9 + 5 + 2 * (7 + 7 + (4 + 3 * 8 * 5) * 2) + 6 * 7",
"(2 + 5 + (9 * 9 * 3 + 6 + 3 + 3)) * (8 * 7 + 4 * 8 * 6)",
"(4 + (5 + 6 + 5 + 3 * 9 + 9) * 2 * (4 * 5) + 4) + 6 * 2 + 7",
"9 + ((3 * 8 + 7 * 3) * 7 + (3 * 6 + 5)) + (9 + 9 + 9 * 8)",
"(7 * 6 + 7) * 5 + 8",
"3 * (8 + (9 + 9 + 4 * 3 * 6) + 7)"
};

static inline unsigned long long getNumber(const char* str, size_t* index)
{
    int len = strlen(str);
    unsigned long long val;
    char intStr[5];
    size_t intStrIndex = 0;
    memset(intStr, 0, sizeof(intStr));
    if (str[*index] < '0' || str[*index] > '9')
    {
        printf("Get num error; expected num: %c\n", str[*index]);
    }
    while (*index < len && str[*index] >= '0' && str[*index] <= '9')
    {
        intStr[intStrIndex] = str[*index];
        (*index)++;
        intStrIndex++;
    }
    sscanf(intStr, "%llu", &val);
    printf("Read val %llu\n", val);
    return val;
}

static unsigned long long parseParen(const char* str, size_t* index)
{
    printf("Entered parse paren\n");
    const size_t len = strlen(str);
    unsigned long long totalVal = 0;
    char curOp = ' ';
    if (str[*index] == '(')
    {
        (*index)++;
        totalVal = parseParen(str, index);
        (*index)++;
    }
    else
    {
        totalVal = getNumber(str, index);
        (*index)++;
    }
    while (*index < len &&
        str[*index] != ')')
    {
        while (str[*index] != '+' &&
            str[*index] != '-' &&
            str[*index] != '*' &&
            str[*index] != '/')
        {
            printf("skipping char: %c\n", str[*index]);
            (*index)++;
        }
        //if (str[*index] != '+' &&
        //    str[*index] != '-' &&
        //    str[*index] != '*' &&
        //    str[*index] != '/')
        //{
        //    printf("ERROR - execpected op: %c\n", str[*index]);
        //    exit(0);
        //}
        curOp = str[*index];
        (*index) += 2;
        if (str[*index] == '(')
        {
            (*index)++;
            switch (curOp)
            {
            case '+': totalVal += parseParen(str, index); break;
            case '-': totalVal -= parseParen(str, index); break;
            case '*': totalVal *= parseParen(str, index); break;
            case '/': totalVal /= parseParen(str, index); break;
            default:
                printf("UNHANDLED CUR OP: %c\n", curOp);
                exit(0);
                break;
            }
            //(*index)++;
        }
        else if (str[*index] >= '0' && str[*index] <= '9')
        {
            unsigned long long nextVal = getNumber(str, index);
            switch (curOp)
            {
            case '+': totalVal += nextVal; break;
            case '-': totalVal -= nextVal; break;
            case '*': totalVal *= nextVal; break;
            case '/': totalVal /= nextVal; break;
            default:
                printf("UNHANDLED CUR OP: %c\n", curOp);
                exit(0);
                break;
            }
            //(*index)++;
        }
        else
        {
            printf("UNHANDLED CHAR, EXPECTED NUM: %c\n", str[*index]);
            exit(0);
        }
    }
    (*index)++;
    printf("End paren val: %llu\n", totalVal);
    return totalVal;
}

static inline unsigned long long parseEntry(const char* str)
{
    const size_t len = strlen(str);
    size_t index = 0;
    unsigned long long totalVal = 0;
    char curOp = ' ';
    if (str[index] == '(')
    {
        (index)++;
        totalVal = parseParen(str, &index);
        (index)++;
    }
    else
    {
        totalVal = getNumber(str, &index);
        (index)++;
    }
    while (index < len)
    {
        while (str[index] != '+' &&
            str[index] != '-' &&
            str[index] != '*' &&
            str[index] != '/')
        {
            printf("skipping char: %c\n", str[index]);
            (index)++;
        }
        //if (str[*index] != '+' &&
        //    str[*index] != '-' &&
        //    str[*index] != '*' &&
        //    str[*index] != '/')
        //{
        //    printf("ERROR - execpected op: %c\n", str[*index]);
        //    exit(0);
        //}
        curOp = str[index];
        (index) += 2;
        if (str[index] == '(')
        {
            (index)++;
            switch (curOp)
            {
            case '+': totalVal += parseParen(str, &index); break;
            case '-': totalVal -= parseParen(str, &index); break;
            case '*': totalVal *= parseParen(str, &index); break;
            case '/': totalVal /= parseParen(str, &index); break;
            default:
                printf("UNHANDLED CUR OP: %c\n", curOp);
                exit(0);
                break;
            }
            (index)++;
        }
        else if (str[index] >= '0' && str[index] <= '9')
        {
            unsigned long long nextVal = getNumber(str, &index);
            switch (curOp)
            {
            case '+': totalVal += nextVal; break;
            case '-': totalVal -= nextVal; break;
            case '*': totalVal *= nextVal; break;
            case '/': totalVal /= nextVal; break;
            default:
                printf("UNHANDLED CUR OP: %c\n", curOp);
                exit(0);
                break;
            }
            //(*index)++;
        }
        else
        {
            printf("UNHANDLED CHAR, EXPECTED NUM: %c\n", str[index]);
            exit(0);
        }
    }

    return totalVal;
}

int main(void)
{
    unsigned long long test;
    size_t index = 0;
#if 0
    //test = parseParen("1 + 2 * 3 + 4 * 5 + 6", &index);
    test = parseEntry("1 + 2 * 3 + 4 * 5 + 6");
    printf("Test: %d\n", test);

    index = 0;
    //test = parseParen("1 + (2 * 3) + (4 * (5 + 6))", &index);
    test = parseEntry("1 + (2 * 3) + (4 * (5 + 6))");
    printf("Test: %d\n", test);

    index = 0;
    //test = parseParen("2 * 3 + (4 * 5)", &index);
    test = parseEntry("2 * 3 + (4 * 5)");
    printf("Test: %d\n", test);

    index = 0;
    //test = parseParen("5 + (8 * 3 + 9 + 3 * 4 * 3)", &index);
    test = parseEntry("5 + (8 * 3 + 9 + 3 * 4 * 3)");
    printf("Test: %d\n", test);

    index = 0;
    //test = parseParen("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))", &index);
    test = parseEntry("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))");
    printf("Test: %d\n", test);

    index = 0;
    //test = parseParen("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2", &index);
    test = parseEntry("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2");
    printf("Test: %d\n", test);

    index = 0;
    //test = parseParen("(4 * 2 * (4 * 7 + 4 * 2) * 5 * 2 * (6 + 6 + 9 * 8)) + 4 * (9 * 9 + 7 * (8 * 4 + 5) * 4) + 4", &index);
    test = parseEntry("(4 * 2 * (4 * 7 + 4 * 2) * 5 * 2 * (6 + 6 + 9 * 8)) + 4 * (9 * 9 + 7 * (8 * 4 + 5) * 4) + 4");
    printf("Test: %llu\n", test);

    index = 0;
    test = parseEntry("3 * 5 + (8 * 2 * (7 * 6 + 8 * 9 * 6)) * ((9 * 3 + 2 * 9 + 2 * 4) * 3) * 7 * 2");
    //test = parseEntry("(8 * 2 * (7 * 6 + 8 * 9 * 6))");
    printf("Test: %llu\n", test);
#endif

#if 1
    size_t i;
    unsigned long long sum = 0;
    for (i = 0; i < INPUT_LEN; i++)
    {
        size_t index = 0;
        unsigned long long val = parseEntry(input[i]);
        printf("Input, val: %s  = %llu\n", input[i], val);
        sum += val;
        printf("Sum: %llu\n", sum);
    }
    printf("Sum: %llu\n", sum);
#endif

    return 0;
}
