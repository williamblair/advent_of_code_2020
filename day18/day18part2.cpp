/*
 * Day 18 - expression parsing 
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <vector>
#include <algorithm>

#define INPUT_LEN 371
const char* input[371] =
{
"5 + 8 * ((6 * 5 * 8 + 5 + 8) * 7 + 3)",
"6 * 7 + 7 * (9 * 6 + 6 + 4 * 6) * 5 * 4",
"((3 * 8 + 7) * 3 * 8 * 8 * 4 * 2) * 8",
"((4 + 5 * 8 + 6 * 5) * 3 * 4 * 9 * 3 + (9 * 8)) + 2 * 7",
"(6 + 5) * 6",
"3 * 4 + 3 + (6 * 3 + (5 + 7 * 7 + 6) * 9)",
"9 * 6 * (5 + 6) + (3 + 8 * 3 * 4 + 8) + 2 * 3",
"7 * ((4 * 7 + 7) + 7) + 9 + 2 + 2",
"5 + 8 + 5 + (8 * 8 * 5) * (5 + (6 * 2 + 4 + 6) + 9 * 6 + 6 + (5 + 6)) * 4",
"3 * (7 * (6 + 8 * 4 + 7 + 2)) * 9 * (8 * 9) * (6 + 3) + 7",
"(8 + 4 * (2 * 9) + 6 + 6 + 3) + 4",
"4 + 6 + (3 + 8 * 2 * 6 * 7 + 3)",
"3 * 5 + (8 * 2 * (7 * 6 + 8 * 9 * 6)) * ((9 * 3 + 2 * 9 + 2 * 4) * 3) * 7 * 2",
"(3 * 3 * (2 * 6 * 3) + 9 + (9 * 8 * 9 * 2) + 4) + 6 * 7 + 9 * 7 * ((9 * 8 + 8) + 4)",
"(5 + 7 * 5 * 8 * 8) * (7 * (6 + 4 * 6 * 8) * 5 * (3 * 7 * 3 * 2 + 2 * 6) * 3 + 3) + 8 + (3 + (7 * 7 + 3))",
"6 + 4 * (2 + 6 + 7 + 8) * 3 + (2 + 3) + (8 * (8 + 8) * 6)",
"(9 + 3) * 7 + 4 + 6 * 3 + (2 * 7 + 9 * 7 + 9)",
"4 + 9 + (7 + 2)",
"(7 + 4 * 4 * 7 + 2) * 4 * 6 * 5 * (9 + 2)",
"(7 + 8 * 9 + 9 + 2) + (9 * (9 + 9) + 2) * 5 + 6 + 5 + 9",
"6 * 2 * 3 * (5 + (4 * 4 * 4 * 2))",
"2 + 8 + (2 + 8) + 2 * ((7 * 3 * 2 * 2 + 7 * 2) + 3 + 8 + 7) + 3",
"3 * 6 * 2 + ((4 * 5 * 6) * 6 + 3 + 6) + 4",
"8 * 8 * (5 + 7 * 6 * 8) * (6 + 5 * 3 * (7 + 8 + 3) * 8 * 2) + 9 * (2 * 9 + 8 * 3)",
"(5 * 3 + 4) * (3 * 4) * (7 * 7 + 4 + 3)",
"2 * 8 * (3 * 8 * (5 + 8) * 8 * 2) + 7 + 8",
"(6 + 5 + 7 + 8 + 2) * (4 * 4)",
"6 * 8 * 3 * 5",
"(4 + (9 * 6 * 6 * 8 * 7) + 7 * 5 + (5 + 3 + 4 * 7 + 8) + 7) + 7 + 2 + (6 + 7) * 9",
"7 + 2 + ((5 + 4 * 6) * 8 + 5) * 7 + 7 + 6",
"((7 + 9 * 5 * 2) * 8 * 5) * 8",
"7 * 2 + 4",
"(9 * 8 * 8 + 8 + (4 + 2 + 5 * 5 * 9) + 3) + (9 * 2 * 8 * 2 * 8) + 7 + 9",
"5 * 4 * 3 * 2 * 4",
"3 * 7 + (2 + 3 + 7 + 8) * 4",
"(3 * (6 + 6 + 3 * 7 + 7 * 8) * 5) + (8 * 8 + 4 * (5 + 4)) * 8 * 4 * 7 * 2",
"5 * (6 + (4 * 3 + 4 * 2) * 9 * 7 + (9 + 6 + 8)) + 2 + 6 * 3",
"9 + (9 + 5 + 5) + 9",
"5 + ((6 * 9 + 9 * 9 + 5 * 6) + 4 + 4) + 6 * 5 + 9 + 3",
"2 * 8 * (2 * 5 * 4 + 8 + 2 + 5) + 6 + (7 + 7 * 6 + 2 * 6)",
"8 + (4 + (4 * 9) + 4) * (5 + 5 + (7 + 8 * 2 + 8) + 3 + (3 * 3) + 4)",
"2 * 6 + 4 + ((2 + 9 * 6 + 7) * 8 + 4 * 2 + (3 + 8 * 2) + 4)",
"5 * (6 + 9) * (5 + 8 * 3 + 8 * 3 * (6 + 6)) * (8 + 7 + 2 * 9 * 2) + 7",
"(3 + 7 + 9 * 7 + (3 + 9 * 8 + 2 * 8 * 8) + 8) * 3 * (5 + 6 * 8 + 2 * (4 * 7 * 6) * 2) * 9 * 8",
"9 + (5 * 4 * 8 + 8) + 7 + (2 * 8 * 4 * 5 * 2) + 2",
"5 * (4 * (8 * 9 + 7 + 4 + 3 * 2) + (2 * 4 * 7 * 5 + 9 + 2) + (2 + 2 * 9 + 3)) + 8 + 9 + 2 + (4 + 9 + 9 * 2 * (6 * 2 * 4 * 7) + 7)",
"6 + ((5 * 4 * 6 + 9 * 6 * 3) + 8 * 8) + 2",
"6 * 5 * 7 * 3 + ((7 * 3) * (7 + 2) + 9 + (9 + 7 * 6 * 6 + 9) * (4 + 8 * 4 + 9)) + 7",
"3 + 4 + (4 * 7 + 8) + 3 * ((5 * 6) * 6) * (7 + 6 + 9 * 8 + 4 * (4 * 2))",
"5 * (4 * 5 * (3 * 4 + 4 * 2 * 9 * 8) + 7 * 7) * 7",
"7 + 8 + (3 * 3 + 2 * (8 * 9) * 5) * 6",
"3 + 8 * ((6 + 8) * 5 * 3 + 2) * (2 * 5) * 7",
"4 * 5 + (9 + 8 * (2 * 3 * 4) + 3 * 5) * 9 + 2",
"4 * ((5 + 6 + 2 + 5 * 3 * 7) * 6) * 7 * 4 + 6 * 4",
"9 + (9 + 4 * 4 + 7 * 9) + 9 + 2",
"6 + (8 * (2 + 8 + 6 * 4) * 8) * 7 * 4 * 3 + 9",
"4 * (5 + (6 * 4 * 8 + 8) * 5 + 6 + 9 * 7) * 6 + 4 * 5",
"6 * 9 * (6 + 5 * 6 + 2 * (5 + 5 + 8)) + (7 + 7)",
"(2 * 7 * 4 * 5 * 8 * 2) + 7 + 5 * 8 * 6 + 6",
"(8 + 3 + 8) * 6 + 8 * (7 * 4 * (5 + 7 + 5 + 7) * 4 + (2 + 2) + 7) + 9",
"((6 * 7 * 9 * 9 * 2) + (2 + 8 + 2 + 3 + 5) * (8 + 9 + 4 + 3)) + 9 * 3 * 6",
"5 + 5 * (5 + 2 + 6 + 8 * 8 * 7) + 2 * 2",
"2 * (4 * (2 + 9 * 4 * 8 + 9) + 3 * 8) + 7",
"5 + (5 + 2 + (5 * 2 * 7 + 9 * 6)) + 7 + ((4 + 9 * 8 + 2) * 6 + 4 + 2 * 3)",
"2 + ((2 * 6 + 4 * 8 + 5) * 7 * 4 + 2) + 4",
"(9 + 8 + 5 * 7 + 5 + 4) + 2 * 3 * 8",
"9 + ((6 * 6 + 9 + 8 * 9 * 3) + 6) + (9 + 8 * 4) + 7 + 6",
"2 + (6 + 7 * 2 + 3 * 9 * (4 * 7 + 8 + 2 * 9)) * 9 + 8",
"9 * 5 + 7 + ((4 + 7 * 6 * 6) * 6 + (3 * 4 + 2 * 7 + 7 + 8) + 9 + (5 * 3 * 4 * 6 * 6 + 7)) * 8 * 6",
"5 + 5 * 2 * 6 * 2 * 5",
"6 * 8 + (3 + 9) * 6 * (9 * 8 * 6 * (9 * 6) * (3 * 4)) + (9 + 7 + 6)",
"3 + 8 * 2 * 9 + 2 * 8",
"(4 * (3 + 9 + 4 + 9 * 6) * (9 + 6 * 8 + 2 * 7)) + 2",
"7 * (7 * 8 * (7 + 2 * 5) + 5 + 2) + 4",
"2 + (4 + 2 + 4 + (8 * 4 + 5 + 6) + 2 * 2) + 9 + 6",
"((9 + 4 * 7 + 4) * (8 * 3 * 3 + 7 + 8 + 8) + 2 + 7) * 9",
"5 + 5 + ((8 * 4 * 2) + 3 + 7)",
"4 + 4 * 7 * 2 + ((6 + 3 * 6) * 5 * (7 * 9 + 8 + 2 * 3))",
"6 * ((5 * 9 + 4 * 2) + 5 + (8 * 7 * 6 * 3 + 2) * (2 * 2 * 6 * 4 + 2)) * 3",
"(4 + (5 + 4 + 5) * 7) + (3 * 9 + 5 * 6 + 4) + (5 * 2 + 7 * 7 * 2 + 2)",
"((5 * 6 * 3) + 9) * (7 * 3 * 3 + (3 + 5 * 4)) + (2 * 8) * 8 + 5",
"(7 * (2 * 6) + 7 * 3) + 7 + 5",
"(5 + (8 * 5 + 2 * 8 + 3 * 2) + 5) + 5 * 4 + 5",
"2 + (5 * 5 + 2 + 7) * (2 * (5 + 3) + 9 * 8 * (5 + 9 * 5 * 7 * 5 + 9))",
"9 + (7 + 4 + 3 + (3 * 3 + 3 + 6 + 6) * (4 + 6)) * 4 + 8",
"3 + 4 * ((7 * 4 * 3 * 3 + 7 * 9) + 8 + (3 * 2 * 4 + 3) * 3 + (6 * 7 + 9 + 7 * 8 + 4)) * 6",
"8 + (7 * (8 + 3 + 5 + 6 + 8) * 9 * (5 + 2 * 4 * 2 + 2) + 6 * 7)",
"(2 + 5 * 3 * 7 + 3 * (5 * 8 + 3 + 8 * 6)) + 8",
"5 + 4",
"8 + 7 + 6 * 5 + 6 + 9",
"6 * ((4 * 6) * 9 * (5 + 7 + 3 + 5) + 8) + (5 + (3 + 3 * 5 + 7))",
"(8 + 8 + 8 + 5 * 5 * (3 * 7 * 2 + 5 * 5)) * 6 + 3",
"4 * (8 + 4 * 3) * (5 * 5 * 6 + 7 + (4 + 4)) + 6 + 9",
"5 * 7 + 2 + (8 + (8 + 4 + 3 * 9 + 8 + 7) + (4 * 2 * 6 + 2) * 8 + 3 + 9) * (4 * 9 + (5 + 7 + 9)) * 2",
"3 * (9 * 2 + 6 + 9 + 8) * 2 * 6 * 5",
"(3 * 7 + (2 * 3 * 2 * 4 + 9)) + (5 * 4 * 7) * 8 * 6 + 9",
"7 + 8 + 3 * (2 + 7)",
"9 * (2 * 5 * 5 + 9 + 5 + 2) * (7 * 9 + 3) * 3 * 4",
"9 * (5 * 5 + 7 * 6) + 8",
"2 + 9 + (2 + 4 + (3 + 2 + 7 + 7 + 8)) * 3 + 8 + 7",
"4 * 9 * (4 * (4 * 3 + 2 + 2) * 9 * 9 + 3 + 7) * (5 + 4) * 5 * (7 + 8)",
"5 * 7 + 2 + 5 * 7 * (9 + 4)",
"8 + (7 * (6 + 3 + 8 + 6 + 7) * (8 + 8) * 7 * 6 * 4) * 6 + 4",
"((4 + 6) + 9) + 3 + 8 * (6 + 5) + 6 + 2",
"7 * (4 * 9 + 5 * 5) + ((4 * 6 + 8) * 8 + 7 * (5 + 6 * 4 * 2 * 2 + 6) * 9 + 8) * 4 + 2 * 3",
"7 + 7 + (2 * 6 + 2) + 4 * 6",
"(5 * 2 * 3) * 6",
"(8 + (4 + 4 + 3 * 5)) * 7 * (8 * 6 * (8 * 9 * 6)) + 2 + (9 + (3 * 5 + 5 * 3) + 5 + 2 * (7 * 3 + 8 + 7 * 3) * 2) * 9",
"2 * 2 * (8 * (6 + 9 + 6) * 3 * 3 * 8)",
"9 + 5 + ((9 * 6 + 2 * 5) + (9 + 3) * (5 * 7 * 9 * 4 * 9) + 7) * 2 * 3",
"8 * (3 + 3 * 3) * 8 + 8",
"8 * (3 * 4 * (6 + 6 * 4 + 9) * 6) * 9 + 9 * ((2 + 7 + 3) * 5 * (5 + 2 * 4) + (8 * 7 * 9) + (2 + 7 + 2 + 9 * 7 * 4))",
"4 * 7 * 6 + 4 * 9",
"8 * 8 * (4 + (2 + 8 * 6) + 8) * ((8 * 7 + 8) * 2 * 2 + (7 * 3 + 9) + 4) + 9",
"(6 * (4 * 7 * 7 * 5 * 9) * 4 * 8 * 6) * 2",
"9 + 8 + ((5 * 4) * 3 * 5 + 9) + 8 + 3 + 9",
"2 * 4 + ((9 * 7) * (8 * 4 * 5 + 6 + 9 + 2) * 8 * 4 + 9) * 8",
"8 * 4 + ((9 + 6) + 2) * 3 * (7 * 4) + 9",
"(7 * 6 * 8 * 4 * 2 + 6) * (9 * (3 + 5) + (2 * 6 * 9 * 7 * 2)) * 8 + 2 + 7",
"7 + 5 * ((9 + 3) + 2 * (6 * 4 + 9 + 2) + 4) * (8 + 3 + 7 * 9 + 3) + 4",
"7 + ((2 + 8 * 8) + 7 + 8 + (4 * 6 + 7 + 5 * 6 + 6) + 7 + (7 * 4 + 4 * 9 + 6 + 6)) + 6 * 9 * 6 * 7",
"4 + (5 + 3 * (9 * 6 + 2 * 6) * 5 * (6 * 2)) + (2 * (7 * 4) + (3 + 9 * 6) * 8 * 4 * (8 * 7 * 2 * 4)) + (7 * 3 + 3) * 6",
"2 + 3 * (8 + (2 + 7 * 3 + 2) + 6) * ((2 + 4) + 3 * 4 * (6 * 4 * 2 * 4 + 7)) + 5",
"(6 * 3) * 7 + (4 * (7 + 8 * 9) * (9 * 5 + 8 + 4) + 5 * (8 + 9 * 8 * 7 * 9 + 6) + 4)",
"7 + (8 * 6 + 9 * 7 * 4 * 6)",
"2 * (3 + 8 + 8 + 3 + 7) * 4 * 6 * (4 + 3 * 5 * 2 * (8 * 8 + 8 + 9 + 7) + 6) * (4 * 9 * 6 + 5)",
"9 + 6 * 7 * 2 + ((9 + 6 * 3 + 2 * 4 + 3) + 8 + 6 * 8 * 9 + 4)",
"8 + (2 * 7 + 2 * (7 * 3 + 7 * 2 * 2 * 8) + (7 * 4 + 6 + 7 + 3) + 9) + 9",
"8 * ((4 + 7 * 4) * 6 + 3)",
"((2 + 2 + 5 * 9) * 9 + 2 * 8 * 8 * 3) * 7",
"(8 + 9 * 2 + 2 * 3 * 6) + (4 * 7 * (2 * 2) + 9 + 7) * 2 + 7 * 9 * (8 * 7 * 2 * 4)",
"(7 * (2 * 4 * 3 + 5 * 4 + 5)) * 3 * 7 * 9",
"2 * 6 + 9 + 5 + ((9 * 2 * 5 + 7) * 6) + 8",
"(8 * (6 * 4 * 5 * 5 + 5 * 2) * 7 + 7 * 6) + ((4 * 5 * 4) * 4)",
"(8 * 8 * (2 + 3)) * 2 + 8 + 5 * ((9 * 5 + 3 * 2 + 5 * 2) * (3 + 5))",
"7 + 8 * 4 * ((4 * 6 + 2 * 2 * 7) * (6 + 9) + 4) + 2 + 6",
"3 * 5 * (2 * 5 * 9 + (5 * 8 * 8))",
"(4 + 2) * 4 * 5 + 8 * ((2 + 8 * 5 + 7) * 9 + 9) * (6 + 3 * 3)",
"((9 + 8 + 8 + 4) * 6) * 5",
"2 + (2 * 9)",
"(4 + 2) + ((8 * 9 * 3 + 2 * 5) + (2 * 3 * 9 * 6 + 8 * 9) * 9 * 4 * 6) + 8 + 8 * ((3 * 9) * 8 + 9 + 6 * 5 + 3)",
"(5 * 8 + 5 * 2 + 3 * 5) * (8 + 7) * 2 * (2 + 5) * 7 * 7",
"7 * 5 * 4 * 4",
"((2 * 9 + 9 * 9 + 8) + 6 + 7 * 7 + 2 + 4) * 4 + 2",
"(8 * 2 + 9 * 7 * (2 * 4 * 6 * 7 + 7 * 8)) + 2 * 7 * 9 + 2",
"3 + 3 * 9 * 6 + 9",
"(6 + (6 * 7 + 4 * 7) + 5) + 8 + 3",
"7 * 7 + (9 + (5 + 4 * 3)) * 2 * (4 * 4 + 3 * 4)",
"4 * 9 + (3 + (6 * 6 * 9 + 8 + 4) + 4 + 7 + 6)",
"8 + 4 * ((9 * 2 * 2 + 8) + 7 * 7) + 8 + 9",
"9 + 6 * 6 * (3 + (2 * 5) + 9 * 3 * 7) + 6",
"9 + (5 * 6 * 7 * 4 + 8 * 9) + 7",
"9 + 7 * (3 + 8 + 2 + 4 + 5 * 3) + 8 + (5 * (4 * 5 * 5 + 2) * 6 * (7 + 4 * 7 * 2 * 5 + 2)) * 7",
"(3 * 2 * 6 + 7) + 7",
"9 * 8 * 4 + 9 + 4 * (5 * 5 * 6 * (3 * 3 + 9) * 9 * 7)",
"(8 * 4 * 9 * 9 + 4 * 4) + 7 + 7",
"(3 + 3 + 2 * 4) + 4 * 5 * (7 + 4 * 3 * 9 + 4) * 3",
"7 + (2 + 3 * 4 + 2 + (9 + 7) * 5) + 5 * 3 * 9",
"7 + ((9 * 8 * 2 * 3 + 7) * 5 + 5 + 4 * 5) + 3 * 8 * 4 + 4",
"4 * ((8 + 3) + 8 + 5 + (6 + 2 + 9 + 2 + 7) + 8) + (8 * 9 * 8)",
"9 * (5 + 5 * 8 + 8) + 2 + 7 * 7",
"3 + (5 + (8 * 5 * 3 + 9 + 8 * 7)) * ((7 * 5) * 5 * 4 * 2) + 9",
"2 + 4 + (7 * 8 + 8 + 5 * 8) + (6 + (2 + 7 + 9 + 6 * 9) * (6 + 7 * 5))",
"2 + 8 + 7 + ((5 * 5) * 6)",
"2 * (9 + (6 + 6 * 6 * 9) + (3 + 5 + 6 * 8 + 7 * 5))",
"(3 + 8 + 3 * 3 * 3) * 7 * (2 * (8 + 4 + 4 * 8 * 7) * 7 * 4) + ((8 + 2 * 4) * 4 + 7 + 6 + 4 + 2)",
"6 + 5 + 9 * (8 * (7 * 5 * 6 * 3 * 7 + 3)) * 3 * 3",
"5 + ((3 * 7 * 7 + 5 + 2) * (6 * 4 + 4 + 6 * 9) + 3 * (5 + 6 * 4 + 6 * 6 + 4) + 9)",
"(2 + (5 + 5 + 4)) + 6",
"6 + 8 * (8 + 7 + 4 + 2 * 3)",
"(7 * 9 + 4 * 2) + 4 * 9",
"2 + (3 * (7 * 6 + 4 * 2 * 6) * (3 + 6 + 4 * 9 * 9 + 3))",
"7 + 4 + 2 + (6 + 8 * (9 + 2 + 9 * 6) * 7 * 8 * 9)",
"9 + (8 + 2 + (7 + 9 + 5 * 8 + 3 + 4) * 8 + 2) + 7 * (4 * (7 * 3 + 7 + 2 + 9 * 5) + 3 + 4 + 3)",
"5 * (3 + 3 + 8 * 7) * (8 + (3 * 3) + 8) + 8 * (7 + 5 + (8 * 3 + 2) * 9 + 8)",
"(4 + 6 + 2 + (7 + 4 * 9) * 8) + 8 + 8",
"(3 + (8 * 5 + 6 + 4 + 6 * 3) + 5 + 8 * 5) + 3 + 8 + 8 + 3 + ((4 * 5 * 5 * 6) * 9 * 3 + 4 + 2 + 6)",
"2 * 8 * 4 + (8 * 2 + 7 * 2 * (9 * 9 + 8 + 4 * 3 * 4) * 6) + 5",
"((4 + 7 + 2) + 9) + 6 + 8 * 9 * 7 + 3",
"(2 + 9) + 3 * 4 * 6",
"7 * 4 * ((2 * 8 * 7) * 8 * 7) + 3",
"2 + 8 + 7 * (5 * 9) * 7 + 5",
"7 + 2 + 3 + 5 * (6 * 8 + 7 + (7 + 5 * 9 + 5 + 5 + 3)) * 9",
"6 + 3 * (5 + 4 * 9 + 9 + 9 + (5 * 9 * 3 + 2 * 5 * 6)) * 6 * 7 * 3",
"2 * 7 + 5 + 3 + 2 + 5",
"6 * 4 + (5 * 3) + 6 + (6 * 9 + 9 + 7 * 4)",
"(3 * 9 + 6 + 4 * (3 * 6 + 8 * 4) * 7) + 8",
"3 * (3 + 7) * 3 + 4 + 6 * 4",
"8 + (2 + (7 + 4 * 5 + 9 + 2)) * 7 + 2",
"2 + (4 + 9 * 5 + (2 * 3 + 5 * 2 * 7 * 8) * 4) * 5",
"8 + ((8 + 6 * 9 * 8 * 5 * 7) * 4 * 2 * 6)",
"(5 * 9) * 8 * (5 + 9 * 3 + 4 + (9 + 2 * 6 * 3 + 8 * 8) + 5) * 6",
"((3 + 6 * 5 * 2) * 7 * 2 * 6 + 6) + 7 + 7 + 2",
"8 + 8 + 7 * 2 * 3",
"5 * ((4 + 2 + 4 * 7) + 5 + 2 * 9) * 6",
"2 + 5",
"(6 + (6 * 4 + 6) * 8 * 9 + 4 * 3) + 8 + 9 + (6 + 3 * 4 + 2 + 6) * (3 * 4)",
"(6 * 9 * 8 * 9 * 7 + 6) + 6",
"3 * (4 * 2 + 8 + (6 * 5 * 3 + 4) * 4) * 5 * 3",
"9 * (4 + 2 + 5)",
"2 + 9 + (5 + (7 + 9) + 4 * 6 * 3)",
"((4 + 2) + 7) + 6 * 7",
"(8 * 9 + 6 * (4 * 2)) + 5",
"8 * (9 * (6 + 8 * 8 * 8 + 7 * 8) + 4 + 6 + 9 * (8 + 3 * 7 * 6 * 2))",
"2 + (4 + (9 + 5)) + 8 * 6 * 5",
"2 + (2 + (3 + 8 * 9 * 8 * 2) * 6) + 2 + (4 * 2 + 3 * 9)",
"((3 + 3) + 9 + 7 * 8 + 9) + (8 + 7 * 6) + 8 + 8 + (4 * 2 * 3 + 8 + 9)",
"((9 + 6 + 2 * 6 * 8 + 6) * 8) + (8 + 7)",
"9 * 6 * 3 + (9 * 5 + (7 * 2 * 9 * 9 * 9 + 3) + (4 + 4))",
"3 + 5 * 9 * 5 * 5 * 5",
"3 + (4 + 6) + (4 * (4 * 5 * 2 + 9 + 8 + 4) + 3)",
"(4 * 4) + (4 * 2 + 4 * 2) + 7",
"((5 * 3 * 8) + 6 * 4 * 5) + 5 * 2 * 6",
"2 + 7 * 5 * (2 * 9 * 9 + (4 * 5 * 5 * 6 + 6 * 4) * 6) + 2 * 7",
"6 * 7 + 9 + (7 * 7 * 7 * 2 * 3 + (7 * 9 + 9 * 9)) * 8 + 3",
"(5 * 6 + (7 + 6 + 3 + 2 * 6 + 3)) + (2 * (3 + 4 * 6)) * 7 * 5 + 6 * ((2 * 2 * 5) + (2 * 5 + 9 + 3 * 9) * (5 + 7 + 7 + 4 * 9 * 5) + (8 + 5 + 8 * 7 + 2))",
"5 + 2 * (5 + (8 + 9 * 2 * 6 + 5 * 8) + 4 + 8 * (4 + 4) * 7)",
"(6 * 9) * 2 * (5 * 8 * 8) + 8",
"(3 + 8 * 7) * 3 * 5 * 7 * 7",
"((7 + 4 + 5 + 9 * 4) + 6 + 5 * (2 + 7 * 8 * 2 * 7 * 2)) + 8",
"7 + ((3 * 6 + 7 + 8 * 5 + 6) * 5 + (7 + 2 + 7 * 6 * 8 * 7) + (6 * 5 * 8 + 8) + 6 * 9) + 3 * 4 * 3 * 8",
"2 + 9 * ((7 + 6) + (5 * 8 * 9 + 6) * 7 + 5 + 9) * 9",
"(6 + 3 * 5) + 5 + 9 + (7 + 9 * 5 * 7) + 6 * 5",
"6 * 2 * 6",
"(5 * 5 + (2 + 7 * 8 + 6 * 6) * (3 + 3 * 2 + 5 * 8 * 7) * 2 + 4) + 4",
"5 * 8 + 7 + (8 * 4 + 8) + 5 * 9",
"2 + 7 + ((4 * 2) * 5 * (5 + 7 * 7 * 4 * 8 * 9)) + 3 + 6",
"4 * ((2 * 5 + 9 * 9) * 2 + 6 * 9) + 7 * ((8 * 4 * 7 + 9 * 9 * 4) * (7 * 4 + 8))",
"3 + 6 + 2 * 5 * ((5 + 6 * 8 + 7 + 3 + 3) * 2 + (4 + 2 + 6 + 4 + 6 + 3) * 6 * 2) * (6 + 6)",
"6 * 9 + 4 * 2 + (9 * 4) + 6",
"7 + ((2 + 3 * 9 * 4 * 5) + 6 + 8) + 2 * 7",
"5 * 7 * 8 + 2 * (9 * 4 + (5 * 7)) + 8",
"(4 + 4 + 5 + (6 * 9 * 9 + 9 + 2 * 7) * 4) + 9 * 8",
"((8 + 2 + 4 + 6) * 4 * 2 + 6 + (9 + 9) * 7) + 4 * (5 * 5)",
"4 * 9 + (3 * (5 + 5 * 8 + 8) + 3 * 6 * 3) + 5 * 3 * 4",
"2 * 9 + (9 + 6 + 2 * (3 + 9 * 8 * 7 * 6 * 6))",
"(2 + (2 * 9 + 4) + (5 + 8 + 2 * 3) * (8 + 2 * 8 + 8 * 8 * 2)) + (5 + 3 * 5 * (6 + 3)) + 8 * 3",
"8 + (6 + 3 * 2 * 9 + (3 * 6) * 6) + 8 * (9 + 8) + 2 + 7",
"(4 * 5 + (2 + 2 + 5 * 7 * 9) + 2) * 3 * 3 + 8 * 7 * 7",
"(8 + 3) * (4 * 3 + 7 + 4) + (4 + 7 * 2 + 2) * 4 + 6",
"2 * 6 * ((2 * 2 * 9 + 6 + 9 + 5) + (6 + 2)) + 3 * 2 * 9",
"4 * 5 * (8 * 7) + (8 * 5 * 8 + 3 + (2 + 8 * 8 + 3) * 3)",
"3 + 4 + 7 + (6 * 3) + ((5 + 5) + 7 + (3 * 2 + 7 + 2 + 7 * 6) + 3 * 6 + (4 + 9 * 3 * 5 * 2)) * 9",
"9 + 5 * 6 + (6 + (3 + 9 * 9 * 7) + 6 * 4 + 9 + 8) + 8 + 5",
"6 + 4 + 2",
"4 + 8 + 6 * (8 + 7 * 3 * 7 * 7 * 2) + (7 + 4 * 9) * ((7 * 8) + 7 * 6 + 9 * 5 * (4 * 4 * 5 * 8))",
"3 + 3 + (4 * 6 * 9 * 5 + 9) + (3 + 4 + 2 * (6 + 3 * 3 * 9 * 3))",
"9 * 6",
"(4 * 9 * 4 + 8 * 4) + 3 * 7 + 5",
"9 + (2 + 4 * 4 + 7 * (6 * 6 * 9)) + 2 * 6",
"((2 + 8 + 9 * 8) + 9 + 3) + 4 * 3 + 2 + 6",
"3 * 7 * 5 * (2 * (2 * 7 * 9) + 9) + 8",
"6 + 7 * 7 + (5 + 3 + 4 + (4 * 9 * 8 + 2 * 5) + 7) * 6 * 9",
"2 * ((5 + 5 * 3 * 3 * 8) + 3 * 4) * 9 * 9 * 8",
"(2 * 7) + 9 * 5 + 9 + 4 * (8 * 5 * (8 + 6 * 8 + 8 + 2) * (2 + 7) * (6 + 7 * 6 + 4 * 2 + 2) + 8)",
"5 * 7 + 7 + 3",
"2 + 3 * (5 + 8 + 6 * 9 * 5) + 9 * 6 + 7",
"(7 * 5 + 5 * 7 + 3 + 3) * 6 + (5 + 6 + 3)",
"9 * 7 + (9 + 5 * 9 + 7) + 9 * 5 + 5",
"(7 * (6 * 7 + 3 * 3 + 2 * 6) + (6 * 6) + 6 + 7 + 9) * 4 * 9 + 3 * 8 * 5",
"7 + 7 * 7 + (3 + 9 + 4 + 5)",
"(8 + (6 * 7 * 6 * 9 + 8 * 7) + 4 * 2 + 4 + (4 + 5 * 8 + 5 * 9 + 5)) * (2 + 9) * 8 * 5 * 4 * 6",
"(9 * (6 + 8 + 5) * 6 * 6) + 3",
"2 * (4 + 3 * 5 + 3) + (9 * 3 + 2 + 3) + 2 * 2",
"4 * (2 * 5 * 3 + 4 * 3 + 5) + 9 * (4 + 7 + 2 * 4)",
"9 + 5 * 8 + 5 + 4 * (2 * 8 + 8)",
"9 + (7 * 3 * 6 + (9 * 7 * 8 + 2 * 3 + 4)) + 4",
"6 * 3 * (8 * (3 * 8 * 5 * 8 + 6) * 3) * 6 * 4",
"5 + 7 + ((4 * 4 + 4) * 5 * 2 * 2 + 7 + (5 + 5 * 4 + 8 + 3 * 5)) * 9 + 9",
"((4 * 8) + 6 * 8 * (3 + 3 + 2 * 3 + 7 * 7)) + 7 + (3 * 2)",
"4 + (7 + 6) + 7 + 7 + (5 + 2 + (5 * 8 * 4) + 7 * (5 * 7) + 2) * 5",
"(7 + 7 * 8 * 7 + 2 * 6) + 6 * 4 + 2 + 2",
"(7 + 7) + 8 + 5 + 2 * 5 * 3",
"((2 * 9 * 8 + 5) * 3 + (4 + 3 + 6 * 9)) * 3 * (9 + 3)",
"5 * (3 + (4 * 6 * 5 * 9 + 9) * 8) * 8 * 5 * 4 + 5",
"2 + 3 * 2 + 7 + (5 + 8 + 2)",
"7 * (6 + (6 + 2 + 8 + 8 + 8)) + 6 + 4 * 8",
"(8 * 8 + 3 * 2 * 2) + 7",
"(7 * (8 + 3 + 8) + (2 + 4) * 8 + 2 * 8) * 4 + 3 * 9",
"8 + (3 * (7 * 6) + (5 * 6 * 5) + 8 * 5) + 7 + 8 * 3 + 5",
"7 * (4 + 2 * 5 * 8) * 2 * 5",
"6 * (5 + 3) + 7 * 2",
"3 + 4",
"7 + 7 * 6 * ((5 + 3 + 3 * 8) + 4 + 8 * 7 * 9) + 8 * 3",
"6 + 4 * 6 + 6 * (3 * 4 + 5 * 3 * (8 * 8 * 8 * 5 + 8) + 5)",
"7 + (5 + 7 + 7 * (2 * 3 * 2 * 6 * 7 + 9)) * 6 + 5 * 2",
"2 + (4 * 8 + 6) * 2 * 4 + 7 + 2",
"(5 + 4 + (6 + 6 * 2 * 8) + 8 * 3) * 9 * 8 * 2 * 6",
"2 * (7 * 6 + 7 * 3 + 6 + 6) * ((8 + 8 + 5) * (9 * 4 + 4 + 3 * 3) * 8 + 2 + 5) * 2 * 4 * 9",
"3 + (5 * 9 + 3 * 4 * (6 + 4 + 7 * 7 * 5 * 7)) * 3 * (7 * (6 * 2 * 9 * 7 * 4 + 3) + 8 * 7 + 4) + (5 + 3 + 6 + 9 * 8)",
"7 + (4 * 8 * 9 * 6 * 5 + 6) + (6 + 5 + 2 * 5) + 7 * 4 + 5",
"(9 + 4 + 6) + 9 + 8 + (7 + 9 + 7 + (2 + 5 + 5 + 8 * 4) * 2) * 4 + (5 + (3 * 7 + 6))",
"(3 + (5 + 4 * 8) * 6) * 9 * 2 * 3 * 4 * 8",
"8 + (6 * 4 * 3 + 3 + 7) + ((4 * 4 + 9 * 8 * 6 * 8) + 9 * 7 + 2) + 9",
"4 + 3 + ((7 * 7) + 9 * 9 + (3 + 5 * 8))",
"3 + 8 + 4",
"(2 * 5 + 2 + (9 + 6 * 3 * 9 + 3)) * ((4 + 6 * 6) * 8 + 2 + 5) + 8",
"9 * (6 + 2 * 6 * (6 + 5 * 9) * 2 * 5)",
"5 + 4 * (4 + (6 + 9 + 8 + 5) * 2 + 9 * (8 + 2 * 2 * 5 * 3)) + (6 + (3 + 8 * 7 * 6 * 5 * 6) * 9) + 6 * 3",
"(3 * 6) * (8 + 2 * 6) * (5 * 5 + (9 * 8 + 9 * 4) * (3 * 3))",
"8 + (6 + 5 * (7 + 9 + 5 + 5 + 6 * 4) + 5 * 2 + 9) * 3 + 2 + 7 * 5",
"(6 + 5) + 7 * 7",
"(4 + 7 + 3 + 5 + 5) * 3 + 7",
"(5 * 3 * 4) + 9 + 2 + 5",
"(4 * 6 * 6) * 7 + 4 + ((3 * 4 * 5) * (5 + 5 + 9 * 7) + 7 + 9 + 9 + 7) * 5 + 8",
"7 * 4 + 8",
"((4 + 8 + 8 + 2 + 4) + 6) + 7 * 4",
"(8 * 8 + 3) + (4 + 3)",
"2 + (8 + 8 + 3 + 3 + 3)",
"2 * ((7 + 2 * 8 + 2) * 8 * 3 * 2) * 8 + 8 * 3 + 3",
"8 * 7 + (9 * 2 * 3) * 4",
"5 + (7 * 8 + 2 * 8 + 8) * 9",
"((3 + 9 + 4 + 3) + 9 + (3 + 8) * (8 + 7 * 7 + 3 * 6 * 3) * (8 + 7) * 3) + 8 + 5",
"8 * 9 + 8 * (4 + 6 * 8 * (6 + 4 + 4 * 8) * 5 * 6) + 4",
"(4 * 8 + 8 * (5 + 4) * 9 + 3) * 9",
"8 * (4 * 2 * 7 + 5 + (5 + 5 * 5 + 7 * 4 + 7))",
"2 + (3 + 9 * (4 * 2)) + 5 * 3 * 4 + 5",
"6 * 2 + ((8 * 9 * 4 * 8 * 6) * 7 + 3 * 9)",
"2 + (9 + (8 + 4 * 8 + 5 * 4) * 6 * 7 + (5 + 3 + 9 * 2 * 4 * 2) * 5) * 9 * 2",
"6 + 2 + 3 + 8 * (8 * 5 * 3 + 8) * (5 + 2 + 5)",
"4 * (6 * 8 + (5 * 6) + 2) * 9 * 8 + (3 + 2 + 4)",
"9 * 5 * 3 + (4 * 6 + (3 * 7 + 6 + 5 + 8))",
"(4 + 5 * 5) + 2 * 4 * 9 + 2 + (7 * 9 * 3 + 4 * 5 * 6)",
"7 + 9 * 6 * (6 + 8 + 3 * 6 + 4 + 6)",
"(9 * 3 + 5) + 7 * 4 + (3 * 8 + 6 + (8 * 4) * 4 + (4 + 4 * 6 * 4)) * 3",
"9 * 6 * 7 * (4 * 4 + (2 * 6 * 6 * 4 * 8 + 3) * 7 * 2 * 8) * 4 * 8",
"3 * 9 * (8 * 2 + 2 * (3 + 6) * (5 + 9 + 6)) + (5 * 4)",
"9 * 4 + 6 * ((4 + 2 + 9 * 2) + 3 * 9 + 4) + 6",
"4 + (4 + (3 + 9 * 5 + 7) + 4 * 7)",
"(2 + 9 * 3 * 6 + 7) * ((2 + 6 * 6 * 5 * 8 * 7) * 8 * 4 + 2)",
"(4 * 2 * (4 * 7 + 4 * 2) * 5 * 2 * (6 + 6 + 9 * 8)) + 4 * (9 * 9 + 7 * (8 * 4 + 5) * 4) + 4",
"3 + (6 * (3 + 8 + 3 + 9 * 5) + 3 + (4 + 9 + 3 + 4 * 3 + 4) + 6)",
"(9 + (5 * 6 + 2 * 7 * 4) + 3 + 3 + 9 + 4) * 5 + 9",
"4 * ((9 * 7 * 4) + 9 * 4 * 3) * (6 + 6 + 3 + 4) * 3 * 5",
"4 + 2 + (4 + 2 * 2 * 4 * 7 + 6) * 3 * (5 + 6 + 6 * (4 * 6 + 2) * 3)",
"(9 * 8 * 9 + 3) + 4 + (8 + (7 + 3 * 9)) + (7 + 5 + (7 * 2 * 5 + 6 * 8 * 5)) * (7 + 3 * 9 * 9 + 4 * 7) + 4",
"3 * 6 + 4 + 6 * 3",
"8 * 3 + (3 * 6 + 5) + 9 + (9 + (7 + 6 * 9 * 2 * 8) + 8 + (5 + 7 * 3 + 8 + 4 + 3)) * 9",
"6 * 7 + (6 * 9 * 9) * ((9 * 2) + 6 * 7 + 3 * 5)",
"(3 * 7) + 2 * 3 + 4 + (5 * 8 + 7 + 9 * 7 * 7)",
"6 * 2 + 3 * 6 + (6 * 7 * 2 * 4) * 8",
"4 + ((2 + 7 * 2 + 6 * 2) * (6 * 4 + 3) * 9 * 2 + 4 + 8) * 5 * 3 * 2 + 2",
"9 + (4 + 5 * 9) * 2 * (5 + 8 * 8 + 2 + 2 * 2) * 4 * (3 * 3 + 3)",
"3 * 7 * 7 + (8 + 7 * 5 * 7) * 9 + (4 * 2)",
"(9 * 6 * 6) + 4 + 9 * 2 + 4 + 3",
"9 * 7 + 6 * 8",
"(7 + 5 * 5 * 2) + 2 + 7 + 8 * 8",
"2 * 7 * (6 + 2) + 2 + 2 * ((8 * 5 + 2 + 8 + 9 * 6) + (4 * 8) + 8 + 9 + (4 + 8 * 9 * 7 + 2))",
"4 + 8 * 2 * 9 + (9 + 3 * 3 + 4 * 5) * 2",
"5 + (6 * (9 + 3 * 9 + 7 + 9 * 2))",
"9 * 7 * 9 + (5 * (6 * 8 + 5 + 3) + (2 * 3 * 5))",
"((2 * 5 * 3) + 6 * 4 + (5 + 3 + 2 * 9)) + (5 * 9) + 9",
"((3 + 2) + (6 * 3 * 4) + 5) * 5 * 8 * (9 * 9 + (6 + 9 + 4 * 7) + (2 * 9 * 8 + 4 * 8 + 3) + (5 + 5 * 7)) + 2 + 8",
"7 + 4 * 2 * 3",
"((3 + 3) * (2 + 6 * 3 * 8) * 7 + 8) + 2 + ((4 + 6 + 3) * 7 * 9 + 9) * 4 * 7 * (6 * (6 + 3 + 4 * 3) + 4)",
"9 + (9 + 7 + 3) * 6 + (2 + 9)",
"5 + ((3 * 3 + 4) + (9 + 8) * 9) + 2 + 9",
"9 * 3",
"8 + 4 + 5 + (9 + 6 * (9 * 7 * 4 * 9) * 3) + 7",
"((9 + 9 * 8 + 4 + 6) + (6 * 7 + 4 + 2 * 2 * 3) * 6 * 8) * 3 + 2 + 7 + 3",
"4 + 4 * 6 + ((8 * 8 * 2) * (3 * 5 + 7 + 2 * 6 * 2) * 4) * 8 * 9",
"(6 + 4) + (8 + 9 * 9 + 5 + 4 * 8) * 4",
"3 + 2 + 5 * (5 * 9 * 5 + 4 * 6)",
"2 + 6 * 8 + (5 + 3 * 6 + (7 + 6 + 3 + 3 * 7))",
"3 * (7 * 9 + 4 + (4 + 4 + 3 + 4 + 3) + (4 * 6 + 2 * 6)) + 6 + 7 + 6",
"9 + 5 + 2 * (7 + 7 + (4 + 3 * 8 * 5) * 2) + 6 * 7",
"(2 + 5 + (9 * 9 * 3 + 6 + 3 + 3)) * (8 * 7 + 4 * 8 * 6)",
"(4 + (5 + 6 + 5 + 3 * 9 + 9) * 2 * (4 * 5) + 4) + 6 * 2 + 7",
"9 + ((3 * 8 + 7 * 3) * 7 + (3 * 6 + 5)) + (9 + 9 + 9 * 8)",
"(7 * 6 + 7) * 5 + 8",
"3 * (8 + (9 + 9 + 4 * 3 * 6) + 7)"
};

static bool getNextChar(const char* str, size_t* index, char* res)
{
    const size_t len = strlen(str);
    do
    {
        (*index)++;
    } while (*index < len && str[*index] == ' ');
    if (*index < len)
    {
        *res = str[*index];
    }
    return (*index < len);
}

static unsigned long long parseParen2(const char* str, size_t* index)
{
    char curOp = ' ';
    char curChar;
    if (!getNextChar(str, index, &curChar))
    {
        printf("ERROR - initial get char in parse paren 2 failed\n");
        exit(0);
    }
    unsigned long long val;
    unsigned long long nextVal;
    if (curChar == '(')
    {
        val = parseParen2(str, index);
    }
    else if (curChar >= '0' && curChar <= '9')
    {
        val = curChar - '0';
    }
    else
    {
        printf("ERROR - expected ( or num\n");
        exit(0);
    }

    while (getNextChar(str, index, &curChar) && curChar != ')')
    {
        if (curChar == '*' || curChar == '+')
        {
            curOp = curChar;
        }
        else if (curChar == '(')
        {
            nextVal = parseParen2(str, index);
            switch (curOp)
            {
            case '+': val += nextVal;  break;
            case '*': val *= nextVal;  break;
            default: printf("ERROR - expected plus or times\n"); exit(0);
            }
        }
        else if (curChar >= '0' && curChar <= '9')
        {
            nextVal = curChar - '0';
            switch (curOp)
            {
            case '+': val += nextVal;  break;
            case '*': val *= nextVal;  break;
            default: printf("ERROR - expected plus or minus\n"); exit(0);
            }
        }
    }

    return val;
}

static unsigned long long parseEntry4(const char* str)
{
    char curOp = ' ';
    size_t index = 0;
    char curChar;
    curChar = str[0];
    unsigned long long val;
    unsigned long long nextVal;
    if (curChar == '(')
    {
        val = parseParen2(str, &index);
    }
    else if (curChar >= '0' && curChar <= '9')
    {
        val = curChar - '0';
    }
    else
    {
        printf("ERROR - expected ( or num\n");
        exit(0);
    }

    while (getNextChar(str, &index, &curChar))
    {
        if (curChar == '*' || curChar == '+')
        {
            curOp = curChar;
        }
        else if (curChar == '(')
        {
            nextVal = parseParen2(str, &index);
            switch (curOp)
            {
            case '+': val += nextVal;  break;
            case '*': val *= nextVal;  break;
            default: printf("ERROR - parseEntry3 expected plus or times\n"); exit(0);
            }
        }
        else if (curChar >= '0' && curChar <= '9')
        {
            nextVal = curChar - '0';
            switch (curOp)
            {
            case '+': val += nextVal;  break;
            case '*': val *= nextVal;  break;
            default: printf("ERROR - expected plus or minus\n"); exit(0);
            }
        }
    }

    return val;
}

static inline size_t findEndRightParenIndex(const char* entry, const size_t leftParenIndex)
{
    size_t index = leftParenIndex;
    size_t numRightNeedFind = 1;
    while (numRightNeedFind != 0)
    {
        index++;
        if (entry[index] == '(')
        {
            numRightNeedFind++;
        }
        else if (entry[index] == ')')
        {
            numRightNeedFind--;
        }
    }

    return index;
}

static inline size_t findEndLeftParenIndex(const char* entry, const size_t rightParenIndex)
{
    size_t index = rightParenIndex;
    size_t numLeftNeedFind = 1;
    while (numLeftNeedFind != 0)
    {
        index--;
        if (entry[index] == ')')
        {
            numLeftNeedFind++;
        }
        else if (entry[index] == '(')
        {
            numLeftNeedFind--;
        }
    }

    return index;
}

static inline size_t findLeftEnd(const char* entry, const size_t plusIndex)
{
    if (entry[plusIndex - 2] >= '0' && entry[plusIndex - 2] <= '9')
    {
        return plusIndex - 2;
    }
    else if (entry[plusIndex - 2] == ')')
    {
        return findEndLeftParenIndex(entry, plusIndex - 2);
    }
    else
    {
        printf("ERROR - unexpected plusindex - 2\n");
        exit(0);
    }

    return 0;
}

static inline size_t findRightEnd(const char* entry, const size_t plusIndex)
{
    if (entry[plusIndex + 2] >= '0' && entry[plusIndex + 2] <= '9')
    {
        return plusIndex + 2;
    }
    else if (entry[plusIndex + 2] == '(')
    {
        return findEndRightParenIndex(entry, plusIndex + 2);
    }
    else
    {
        printf("ERROR - unexpected plusindex + 2\n");
        exit(0);
    }

    return 0;
}

static std::string addParens(const char* entry)
{
    long int i;
    const size_t len = strlen(entry);
    std::vector<size_t> leftParenIndices;
    std::vector<size_t> rightParenIndices;
    std::string res = "";

    for (i = 0; i < len; i++)
    {
        if (entry[i] == '+')
        {
            size_t leftEnd = findLeftEnd(entry, i);
            size_t rightEnd = findRightEnd(entry, i);
            leftParenIndices.push_back(leftEnd);
            rightParenIndices.push_back(rightEnd);
        }
    }

    for (i = 0; i < len; i++)
    {
        if (std::find(leftParenIndices.begin(),
            leftParenIndices.end(),
            i)
            != leftParenIndices.end())
        {
            res += "(";
        }

        res += entry[i];

        if (std::find(rightParenIndices.begin(),
            rightParenIndices.end(),
            i)
            != rightParenIndices.end())
        {
            res += ")";
        }
    }

    return res;
}

static unsigned long long parseEntry3(const char* str)
{
    std::string testEntry = addParens(str);
    printf("After paren: %s\n", testEntry.c_str());
    return parseEntry4(testEntry.c_str());
}

int main(void)
{
    unsigned long long test;
    size_t index = 0;
#if 0
    //test = parseParen("1 + 2 * 3 + 4 * 5 + 6", &index);
    test = parseEntry3("1 + 2 * 3 + 4 * 5 + 6");
    printf("Test: %d\n", test);

    index = 0;
    //test = parseParen("1 + (2 * 3) + (4 * (5 + 6))", &index);
    test = parseEntry3("1 + (2 * 3) + (4 * (5 + 6))");
    printf("Test: %d\n", test);

    index = 0;
    //test = parseParen("2 * 3 + (4 * 5)", &index);
    test = parseEntry3("2 * 3 + (4 * 5)");
    printf("Test: %d\n", test);

    index = 0;
    //test = parseParen("5 + (8 * 3 + 9 + 3 * 4 * 3)", &index);
    test = parseEntry3("5 + (8 * 3 + 9 + 3 * 4 * 3)");
    printf("Test: %d\n", test);

    index = 0;
    //test = parseParen("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))", &index);
    test = parseEntry3("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))");
    printf("Test: %d\n", test);

    index = 0;
    //test = parseParen("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2", &index);
    test = parseEntry3("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2");
    printf("Test: %d\n", test);

    index = 0;
    //test = parseParen("(4 * 2 * (4 * 7 + 4 * 2) * 5 * 2 * (6 + 6 + 9 * 8)) + 4 * (9 * 9 + 7 * (8 * 4 + 5) * 4) + 4", &index);
    test = parseEntry3("(4 * 2 * (4 * 7 + 4 * 2) * 5 * 2 * (6 + 6 + 9 * 8)) + 4 * (9 * 9 + 7 * (8 * 4 + 5) * 4) + 4");
    printf("Test: %llu\n", test);
#endif

    size_t i;
    unsigned long long sum = 0;
    for (i = 0; i < INPUT_LEN; i++)
    {
        unsigned long long val = parseEntry3(input[i]);
        printf("val: %llu\n", val);
        sum += val;
        printf("Sum: %llu\n", sum);
    }
    printf("Sum: %llu\n", sum);

    return 0;
}
